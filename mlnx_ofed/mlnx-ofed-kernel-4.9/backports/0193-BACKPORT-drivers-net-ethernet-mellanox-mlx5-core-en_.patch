From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_rep.h

Change-Id: If510cac5261012c2d72aa76ee3c23fc36fa5bb6b
---
 drivers/net/ethernet/mellanox/mlx5/core/en_rep.h | 41 ++++++++++++++++++++++--
 1 file changed, 39 insertions(+), 2 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
@@ -33,8 +33,11 @@
 #ifndef __MLX5E_REP_H__
 #define __MLX5E_REP_H__
 
+#if defined(HAVE_IP_TUNNEL_INFO) || defined(CONFIG_COMPAT_IP_TUNNELS)
 #include <net/ip_tunnels.h>
+#endif
 #include <linux/rhashtable.h>
+#include <linux/refcount.h>
 #include "eswitch.h"
 #include "en.h"
 #include "lib/port_tun.h"
@@ -48,10 +51,12 @@ struct mlx5e_neigh_update_table {
 	 */
 	struct list_head	neigh_list;
 	/* protect lookup/remove operations */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	spinlock_t              encap_lock;
 	struct notifier_block   netevent_nb;
 	struct delayed_work     neigh_stats_work;
 	unsigned long           min_interval; /* jiffies */
+#endif
 };
 
 struct mlx5_rep_uplink_priv {
@@ -122,6 +127,7 @@ struct mlx5e_neigh_hash_entry {
 	/* protects encap list */
 	spinlock_t encap_list_lock;
 	/* encap list sharing the same neigh */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct list_head encap_list;
 
 	/* valid only when the neigh reference is taken during
@@ -135,6 +141,7 @@ struct mlx5e_neigh_hash_entry {
 	 * it's used by the neigh notification call.
 	 */
 	refcount_t refcnt;
+#endif
 
 	/* Save the last reported time offloaded trafic pass over one of the
 	 * neigh hash entry flows. Use it to periodically update the neigh
@@ -145,6 +152,7 @@ struct mlx5e_neigh_hash_entry {
 	struct rcu_head rcu;
 };
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 enum {
 	/* set when the encap entry is successfully offloaded into HW */
 	MLX5_ENCAP_ENTRY_VALID     = BIT(0),
@@ -154,36 +162,58 @@ struct encap_id_entry {
 	struct mlx5_pkt_reformat *pkt_reformat;
 	struct list_head list;
 };
+#endif
+
+#ifdef HAVE_NET_TC_ACT_TC_TUNNEL_KEY_H
+#if !defined(HAVE_IP_TUNNEL_INFO) && !defined(CONFIG_COMPAT_IP_TUNNELS)
+struct mlx5_encap_info {
+	__be32 daddr;
+	__be32 tun_id;
+	__be16 tp_dst;
+};
+#endif
+ 
 
 struct mlx5e_encap_entry {
 	/* attached neigh hash entry */
 	struct mlx5e_neigh_hash_entry *nhe;
 	/* neigh hash entry list of encaps sharing the same neigh */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct list_head encap_list;
 	/* dealloc invalid encap_ids only when freeing mlx5e_encap_entry */
 	struct list_head encap_id_list;
 	struct mlx5e_neigh m_neigh;
+#endif
 	/* a node of the eswitch encap hash table which keeping all the encap
 	 * entries
 	 */
 	struct hlist_node encap_hlist;
 	struct list_head flows;
 	struct mlx5_pkt_reformat *pkt_reformat;
+#if defined(HAVE_IP_TUNNEL_INFO) || defined(CONFIG_COMPAT_IP_TUNNELS)
 	const struct ip_tunnel_info *tun_info;
+#else
+	struct mlx5_encap_info tun_info;
+#endif
 	unsigned char h_dest[ETH_ALEN];	/* destination eth addr	*/
 
 	struct net_device *out_dev;
 	struct net_device *route_dev;
 	struct mlx5e_tc_tunnel *tunnel;
 	int reformat_type;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	u8 flags;
 	char *encap_header;
 	int encap_size;
+#else
+	struct neighbour *n;
+#endif
 	refcount_t refcnt;
 	struct completion hw_res_created;
 	int compl_result;
 	struct rcu_head rcu;
 };
+#endif /* HAVE_NET_TC_ACT_TC_TUNNEL_KEY_H */
 
 struct mlx5e_rep_sq {
 	struct mlx5_flow_handle	*send_to_vport_rule;
@@ -208,10 +238,12 @@ int mlx5e_rep_get_offload_stats(int attr
 
 void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 int mlx5e_rep_encap_entry_attach(struct mlx5e_priv *priv,
 				 struct mlx5e_encap_entry *e);
 void mlx5e_rep_encap_entry_detach(struct mlx5e_priv *priv,
 				  struct mlx5e_encap_entry *e);
+#endif
 
 void mlx5e_rep_queue_neigh_stats_work(struct mlx5e_priv *priv);
 
@@ -229,14 +261,19 @@ int mlx5e_rep_get_phys_port_name(struct
 				 char *buf, size_t len);
 int mlx5e_uplink_rep_set_vf_vlan(struct net_device *dev, int vf, u16 vlan,
 				 u8 qos, __be16 vlan_proto);
+int mlx5e_attr_get(struct net_device *dev, struct switchdev_attr *attr);
+
+#ifdef HAVE_SWITCHDEV_H_COMPAT
+extern struct attribute_group rep_sysfs_attr_group;
+#endif /* HAVE_SWITCHDEV_H_COMPAT */
 
 #else /* CONFIG_MLX5_ESWITCH */
 static inline bool mlx5e_is_uplink_rep(struct mlx5e_priv *priv) { return false; }
 static inline bool mlx5e_is_vport_rep_loaded(struct mlx5e_priv *priv) { return false; }
 static inline int mlx5e_add_sqs_fwd_rules(struct mlx5e_priv *priv) { return 0; }
 static inline void mlx5e_remove_sqs_fwd_rules(struct mlx5e_priv *priv) {}
-static int mlx5e_uplink_rep_set_vf_vlan(struct net_device *dev, int vf, u16 vlan,
-					u8 qos, __be16 vlan_proto)
+static inline int mlx5e_uplink_rep_set_vf_vlan(struct net_device *dev, int vf, u16 vlan,
+					       u8 qos, __be16 vlan_proto)
 { return -EOPNOTSUPP; }
 #endif
 
