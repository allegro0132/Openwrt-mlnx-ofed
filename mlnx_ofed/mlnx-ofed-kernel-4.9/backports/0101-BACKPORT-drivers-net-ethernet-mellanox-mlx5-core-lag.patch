From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c

Change-Id: Ia45d22b3ddef3c6b67e2fafb5b8c3e0bd9209d4b
---
 drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c | 50 +++++++++++++++++++++++-
 1 file changed, 48 insertions(+), 2 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c
@@ -2,13 +2,22 @@
 /* Copyright (c) 2019 Mellanox Technologies. */
 
 #include <linux/netdevice.h>
+#ifdef HAVE_FIB_INFO_NH
+#include <net/nexthop.h>
+#endif
 #include <net/ip_fib.h>
-#include "lag.h"
-#include "lag_mp.h"
 #include "mlx5_core.h"
 #include "eswitch.h"
 #include "lib/mlx5.h"
 
+#if defined(MLX_USE_LAG_COMPAT) || defined(HAVE_LAG_TX_TYPE)
+#define MLX_LAG_SUPPORTED
+#endif
+
+#ifdef MLX_LAG_SUPPORTED
+#include "lag.h"
+
+#ifdef HAVE_FIB_NH_NOTIFIER_INFO
 static bool mlx5_lag_multipath_check_prereq(struct mlx5_lag *ldev)
 {
 	if (!ldev->pf[0].dev || !ldev->pf[1].dev)
@@ -16,6 +25,7 @@ static bool mlx5_lag_multipath_check_pre
 
 	return mlx5_esw_multipath_prereq(ldev->pf[0].dev, ldev->pf[1].dev);
 }
+#endif
 
 static bool __mlx5_lag_is_multipath(struct mlx5_lag *ldev)
 {
@@ -43,6 +53,7 @@ bool mlx5_lag_is_multipath(struct mlx5_c
  *     2 - set affinity to port 2.
  *
  **/
+#ifdef HAVE_FIB_NH_NOTIFIER_INFO
 static void mlx5_lag_set_port_affinity(struct mlx5_lag *ldev, int port)
 {
 	struct lag_tracker tracker;
@@ -122,7 +133,11 @@ static void mlx5_lag_fib_route_event(str
 	/* Handle add/replace event */
 	if (fi->fib_nhs == 1) {
 		if (__mlx5_lag_is_active(ldev)) {
+#ifdef HAVE_FIB_NH_DEV
 			struct net_device *nh_dev = fi->fib_nh[0].fib_nh_dev;
+#else
+			struct net_device *nh_dev = fi->fib_nh[0].nh_dev;
+#endif
 			int i = mlx5_lag_dev_get_netdev_idx(ldev, nh_dev);
 
 			mlx5_lag_set_port_affinity(ldev, ++i);
@@ -134,10 +149,17 @@ static void mlx5_lag_fib_route_event(str
 		return;
 
 	/* Verify next hops are ports of the same hca */
+#ifdef HAVE_FIB_NH_DEV
 	if (!(fi->fib_nh[0].fib_nh_dev == ldev->pf[0].netdev &&
 	      fi->fib_nh[1].fib_nh_dev == ldev->pf[1].netdev) &&
 	    !(fi->fib_nh[0].fib_nh_dev == ldev->pf[1].netdev &&
 	      fi->fib_nh[1].fib_nh_dev == ldev->pf[0].netdev)) {
+#else
+	if (!(fi->fib_nh[0].nh_dev == ldev->pf[0].netdev &&
+	      fi->fib_nh[1].nh_dev == ldev->pf[1].netdev) &&
+	    !(fi->fib_nh[0].nh_dev == ldev->pf[1].netdev &&
+	      fi->fib_nh[1].nh_dev == ldev->pf[0].netdev)) {
+#endif
 		mlx5_core_warn(ldev->pf[0].dev, "Multipath offload require two ports of the same HCA\n");
 		return;
 	}
@@ -167,7 +189,11 @@ static void mlx5_lag_fib_nexthop_event(s
 
 	/* nh added/removed */
 	if (event == FIB_EVENT_NH_DEL) {
+#ifdef HAVE_FIB_NH_DEV
 		int i = mlx5_lag_dev_get_netdev_idx(ldev, fib_nh->fib_nh_dev);
+#else
+		int i = mlx5_lag_dev_get_netdev_idx(ldev, fib_nh->nh_dev);
+#endif
 
 		if (i >= 0) {
 			i = (i + 1) % 2 + 1; /* peer port */
@@ -239,6 +265,9 @@ static int mlx5_lag_fib_event(struct not
 	struct fib_entry_notifier_info *fen_info;
 	struct fib_nh_notifier_info *fnh_info;
 	struct fib_info *fi;
+#ifdef HAVE_FIB_INFO_NH
+	struct net_device *fib_dev;
+#endif
 
 	if (info->family != AF_INET)
 		return NOTIFY_DONE;
@@ -254,8 +283,14 @@ static int mlx5_lag_fib_event(struct not
 		fen_info = container_of(info, struct fib_entry_notifier_info,
 					info);
 		fi = fen_info->fi;
+#ifdef HAVE_FIB_INFO_NH
+		fib_dev = fib_info_nh(fen_info->fi, 0)->fib_nh_dev;
+		if (fib_dev != ldev->pf[0].netdev &&
+		    fib_dev != ldev->pf[1].netdev) {
+#else
 		if (fi->fib_dev != ldev->pf[0].netdev &&
 		    fi->fib_dev != ldev->pf[1].netdev) {
+#endif
 			return NOTIFY_DONE;
 		}
 		fib_work = mlx5_lag_init_fib_work(ldev, event);
@@ -299,8 +334,13 @@ int mlx5_lag_mp_init(struct mlx5_lag *ld
 		return -ENOMEM;
 
 	mp->fib_nb.notifier_call = mlx5_lag_fib_event;
+#ifdef HAVE_REGISTER_FIB_NOTIFIER_HAS_4_PARAMS
+	err = register_fib_notifier(&init_net, &mp->fib_nb,
+				    mlx5_lag_fib_event_flush, NULL);
+#else
 	err = register_fib_notifier(&mp->fib_nb,
 				    mlx5_lag_fib_event_flush);
+#endif
 	if (err) {
 		destroy_workqueue(mp->wq);
 		mp->fib_nb.notifier_call = NULL;
@@ -316,7 +356,13 @@ void mlx5_lag_mp_cleanup(struct mlx5_lag
 	if (!mp->fib_nb.notifier_call)
 		return;
 
+#ifdef HAVE_REGISTER_FIB_NOTIFIER_HAS_4_PARAMS
+	unregister_fib_notifier(&init_net, &mp->fib_nb);
+#else
 	unregister_fib_notifier(&mp->fib_nb);
+#endif
 	destroy_workqueue(mp->wq);
 	mp->fib_nb.notifier_call = NULL;
 }
+#endif /* HAVE_FIB_NH_NOTIFIER_INFO */
+#endif /* MLX_LAG_SUPPORTED */
