From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/eswitch_devlink_compat.c

Change-Id: I2533f0e24095ab75e59fb3fc4509f792babeca21
---
 .../mellanox/mlx5/core/eswitch_devlink_compat.c    | 82 ++++++++++++++++++++--
 1 file changed, 78 insertions(+), 4 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_devlink_compat.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_devlink_compat.c
@@ -4,6 +4,7 @@
 #include <linux/mlx5/mlx5_ifc.h>
 #include <linux/mlx5/vport.h>
 #include <linux/mlx5/fs.h>
+#include <uapi/linux/devlink.h>
 #include <linux/fs.h>
 #include "mlx5_core.h"
 #include "eswitch.h"
@@ -28,11 +29,33 @@ static char *encap_to_str[] = {
 	[DEVLINK_ESWITCH_ENCAP_MODE_BASIC] = "basic",
 };
 
+static char *uplink_rep_mode_to_str[] = {
+	[MLX5_ESW_UPLINK_REP_MODE_NEW_NETDEV] = "new_netdev",
+	[MLX5_ESW_UPLINK_REP_MODE_NIC_NETDEV] = "nic_netdev",
+};
+
+static char *steering_mode_to_str[] = {
+	[DEVLINK_ESWITCH_STEERING_MODE_DMFS] = "dmfs",
+	[DEVLINK_ESWITCH_STEERING_MODE_SMFS] = "smfs",
+};
+
 struct devlink_compat_op {
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+	int (*write_enum)(struct devlink *devlink, enum devlink_eswitch_encap_mode set, struct netlink_ext_ack *extack);
 	int (*write_u8)(struct devlink *devlink, u8 set, struct netlink_ext_ack *extack);
 	int (*write_u16)(struct devlink *devlink, u16 set, struct netlink_ext_ack *extack);
+#else
+	int (*write_enum)(struct devlink *devlink, enum devlink_eswitch_encap_mode set);
+	int (*write_u8)(struct devlink *devlink, u8 set);
+	int (*write_u16)(struct devlink *devlink, u16 set);
+#endif
+	int (*read_enum)(struct devlink *devlink, enum devlink_eswitch_encap_mode *read);
 	int (*read_u8)(struct devlink *devlink, u8 *read);
 	int (*read_u16)(struct devlink *devlink, u16 *read);
+
+	int (*read_steering_mode)(struct devlink *devlink, enum devlink_eswitch_steering_mode *read);
+	int (*write_steering_mode)(struct devlink *devlink, enum devlink_eswitch_steering_mode set);
+
 	char **map;
 	int map_size;
 	char *compat_name;
@@ -54,12 +77,31 @@ static struct devlink_compat_op devlink_
 		.compat_name = "inline",
 	},
 	{
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET_GET_WITH_ENUM
+		.read_enum = mlx5_devlink_eswitch_encap_mode_get,
+		.write_enum = mlx5_devlink_eswitch_encap_mode_set,
+#else
 		.read_u8 = mlx5_devlink_eswitch_encap_mode_get,
 		.write_u8 = mlx5_devlink_eswitch_encap_mode_set,
+#endif
 		.map = encap_to_str,
 		.map_size = ARRAY_SIZE(encap_to_str),
 		.compat_name = "encap",
 	},
+	{
+		.read_u8 = mlx5_devlink_eswitch_uplink_rep_mode_get,
+		.write_u8 = mlx5_devlink_eswitch_uplink_rep_mode_set,
+		.map = uplink_rep_mode_to_str,
+		.map_size = ARRAY_SIZE(uplink_rep_mode_to_str),
+		.compat_name = "uplink_rep_mode",
+	},
+	{
+		.read_steering_mode = mlx5_devlink_eswitch_steering_mode_get,
+		.write_steering_mode = mlx5_devlink_eswitch_steering_mode_set,
+		.map = steering_mode_to_str,
+		.map_size = ARRAY_SIZE(steering_mode_to_str),
+		.compat_name = "steering_mode",
+	},
 };
 
 struct compat_devlink {
@@ -80,6 +122,8 @@ static ssize_t esw_compat_read(struct ko
 	const char *entname = attr->attr.name;
 	struct devlink_compat_op *op = 0;
 	int i = 0, ret, len = 0;
+	enum devlink_eswitch_encap_mode read_enum;
+	enum devlink_eswitch_steering_mode read_steering_mode;
 	u8 read8;
 	u16 read;
 
@@ -99,10 +143,19 @@ static ssize_t esw_compat_read(struct ko
 
 	if (op->read_u16) {
 		ret = op->read_u16(devlink, &read);
-	} else {
+	} else if (op->read_u8) {
 		ret = op->read_u8(devlink, &read8);
 		read = read8;
+	} else if (op->read_enum){
+		ret = op->read_enum(devlink, &read_enum);
+		read = read_enum;
 	}
+	else if (op->read_steering_mode) {
+		ret = op->read_steering_mode(devlink, &read_steering_mode);
+		read = read_steering_mode;
+	}
+	else
+		return -ENOENT;
 
 	atomic_set(&esw->handler.in_progress, 0);
 
@@ -127,7 +180,9 @@ static ssize_t esw_compat_write(struct k
 	struct mlx5_core_dev *dev = cdevlink->mdev;
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
 	struct devlink *devlink = priv_to_devlink(dev);
+#ifdef HAVE_NETLINK_EXT_ACK
 	static struct netlink_ext_ack ack = { ._msg = NULL };
+#endif
 	const char *entname = attr->attr.name;
 	struct devlink_compat_op *op = 0;
 	u16 set = 0;
@@ -169,16 +224,35 @@ static ssize_t esw_compat_write(struct k
 		return -EBUSY;
 
 	if (op->write_u16)
-		ret = op->write_u16(devlink, set, &ack);
+		ret = op->write_u16(devlink, set
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+				    , &ack
+#endif
+				    );
+	else if (op->write_u8)
+		ret = op->write_u8(devlink, set
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+				   , &ack
+#endif
+				   );
+	else if (op->write_enum)
+		ret = op->write_enum(devlink, set
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+				   , &ack
+#endif
+				   );
+	else if (op->write_steering_mode)
+		ret = op->write_steering_mode(devlink, set);
 	else
-		ret = op->write_u8(devlink, set, &ack);
+		return -EINVAL;
 
 	if (strcmp(entname, "mode") != 0)
 		atomic_set(&esw->handler.in_progress, 0);
 
+#ifdef HAVE_NETLINK_EXT_ACK
 	if (ack._msg)
 		mlx5_core_warn(dev, "%s\n", ack._msg);
-
+#endif
 	if (ret < 0)
 		return ret;
 
