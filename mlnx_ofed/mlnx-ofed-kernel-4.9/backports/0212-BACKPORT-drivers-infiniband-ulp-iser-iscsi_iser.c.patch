From: Sergey Gorenko <sergeygo@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/ulp/iser/iscsi_iser.c

Change-Id: I021c626f6742d23667c92ae31bbf4b6797df9669
---
 drivers/infiniband/ulp/iser/iscsi_iser.c | 115 +++++++++++++++++++++++
 1 file changed, 115 insertions(+)

--- a/drivers/infiniband/ulp/iser/iscsi_iser.c
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.c
@@ -76,6 +76,9 @@
 
 MODULE_DESCRIPTION("iSER (iSCSI Extensions for RDMA) Datamover");
 MODULE_LICENSE("Dual BSD/GPL");
+#ifdef RETPOLINE_MLNX
+MODULE_INFO(retpoline, "Y");
+#endif
 MODULE_AUTHOR("Alex Nezhinsky, Dan Bar Dov, Or Gerlitz");
 
 static struct scsi_host_template iscsi_iser_sht;
@@ -108,7 +111,11 @@ MODULE_PARM_DESC(pi_enable, "Enable T10-
 
 int iser_pi_guard;
 module_param_named(pi_guard, iser_pi_guard, int, S_IRUGO);
+#ifdef HAVE_SCSI_CMND_PROT_FLAGS
 MODULE_PARM_DESC(pi_guard, "T10-PI guard_type [deprecated]");
+#else
+MODULE_PARM_DESC(pi_guard, "T10-PI guard_type, 0:CRC|1:IP_CSUM (default:IP_CSUM)");
+#endif
 
 /*
  * iscsi_iser_recv() - Process a successful recv completion
@@ -221,6 +228,27 @@ out:
 	return ret;
 }
 
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+/**
+ * set_last_ping_on_nopout_task()
+ * @task: iscsi task
+ *
+ * Workaround libiscsi not setting iscsi_conn->last_ping
+ * in case of failure.
+ * fixed in kernels > 4.3
+ */
+static inline void
+set_last_ping_on_nopout_task(struct iscsi_task *task)
+{
+	u8 task_opcode = (task->hdr->opcode & ISCSI_OPCODE_MASK);
+
+	if (task_opcode == ISCSI_OP_NOOP_OUT)
+		task->conn->last_ping = jiffies;
+}
+#endif
+
+
 /**
  * iscsi_iser_task_init() - Initialize iscsi-iser task
  * @task: iscsi task
@@ -238,8 +266,18 @@ iscsi_iser_task_init(struct iscsi_task *
 
 	ret = iser_initialize_task_headers(task, &iser_task->desc);
 	if (ret) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+		u8 task_opcode = (task->hdr->opcode & ISCSI_OPCODE_MASK);
+
+		iser_err("Failed to init task %p, opcode %d, err = %d",
+			 iser_task, task_opcode, ret);
+
+		set_last_ping_on_nopout_task(task);
+#else
 		iser_err("Failed to init task %p, err = %d\n",
 			 iser_task, ret);
+#endif
+
 		return ret;
 	}
 
@@ -273,6 +311,17 @@ iscsi_iser_mtask_xmit(struct iscsi_conn
 	iser_dbg("mtask xmit [cid %d itt 0x%x]\n", conn->id, task->itt);
 
 	error = iser_send_control(conn, task);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+	if (error) {
+		u8 task_opcode = (task->hdr->opcode & ISCSI_OPCODE_MASK);
+
+		iser_err("Failed to send task %p, opcode %d, err = %d",
+			 task->dd_data, task_opcode, error);
+
+		set_last_ping_on_nopout_task(task);
+
+	}
+#endif
 
 	/* since iser xmits control with zero copy, tasks can not be recycled
 	 * right after sending them.
@@ -391,6 +440,7 @@ static void iscsi_iser_cleanup_task(stru
 	}
 }
 
+#ifdef HAVE_ISCSI_TRANSPORT_CHECK_PROTECTION
 /**
  * iscsi_iser_check_protection() - check protection information status of task.
  * @task:     iscsi task
@@ -415,6 +465,7 @@ iscsi_iser_check_protection(struct iscsi
 		return iser_check_task_pi_status(iser_task, ISER_DIR_OUT,
 						 sector);
 }
+#endif
 
 /**
  * iscsi_iser_conn_create() - create a new iscsi-iser connection
@@ -597,6 +648,7 @@ iscsi_iser_session_destroy(struct iscsi_
 static inline unsigned int
 iser_dif_prot_caps(int prot_caps)
 {
+#ifdef HAVE_SCSI_CMND_PROT_FLAGS
 	return ((prot_caps & IB_PROT_T10DIF_TYPE_1) ?
 		SHOST_DIF_TYPE1_PROTECTION | SHOST_DIX_TYPE0_PROTECTION |
 		SHOST_DIX_TYPE1_PROTECTION : 0) |
@@ -604,6 +656,14 @@ iser_dif_prot_caps(int prot_caps)
 		SHOST_DIF_TYPE2_PROTECTION | SHOST_DIX_TYPE2_PROTECTION : 0) |
 	       ((prot_caps & IB_PROT_T10DIF_TYPE_3) ?
 		SHOST_DIF_TYPE3_PROTECTION | SHOST_DIX_TYPE3_PROTECTION : 0);
+#else
+	return ((prot_caps & IB_PROT_T10DIF_TYPE_1) ?
+		SHOST_DIF_TYPE1_PROTECTION | SHOST_DIX_TYPE1_PROTECTION : 0) |
+	       ((prot_caps & IB_PROT_T10DIF_TYPE_2) ?
+		SHOST_DIF_TYPE2_PROTECTION | SHOST_DIX_TYPE2_PROTECTION : 0) |
+	       ((prot_caps & IB_PROT_T10DIF_TYPE_3) ?
+		SHOST_DIF_TYPE3_PROTECTION | SHOST_DIX_TYPE3_PROTECTION : 0);
+#endif
 }
 
 /**
@@ -659,8 +719,15 @@ iscsi_iser_session_create(struct iscsi_e
 			u32 sig_caps = ib_conn->device->ib_device->attrs.sig_prot_cap;
 
 			scsi_host_set_prot(shost, iser_dif_prot_caps(sig_caps));
+#ifdef HAVE_SCSI_CMND_PROT_FLAGS
 			scsi_host_set_guard(shost, SHOST_DIX_GUARD_IP |
 						   SHOST_DIX_GUARD_CRC);
+#else
+			if (iser_pi_guard)
+				scsi_host_set_guard(shost, SHOST_DIX_GUARD_IP);
+			else
+				scsi_host_set_guard(shost, SHOST_DIX_GUARD_CRC);
+#endif
 		}
 
 		if (iscsi_host_add(shost,
@@ -768,9 +835,16 @@ iscsi_iser_conn_get_stats(struct iscsi_c
 	stats->r2t_pdus = conn->r2t_pdus_cnt; /* always 0 */
 	stats->tmfcmd_pdus = conn->tmfcmd_pdus_cnt;
 	stats->tmfrsp_pdus = conn->tmfrsp_pdus_cnt;
+#ifdef HAVE_BLK_QUEUE_VIRT_BOUNDARY
 	stats->custom_length = 0;
+#else
+	stats->custom_length = 1;
+	strcpy(stats->custom[0].desc, "fmr_unalign_cnt");
+	stats->custom[0].value = conn->fmr_unalign_cnt;
+#endif
 }
 
+#ifdef HAVE_ISCSI_GET_EP_PARAM
 static int iscsi_iser_get_ep_param(struct iscsi_endpoint *ep,
 				   enum iscsi_param param, char *buf)
 {
@@ -790,6 +864,7 @@ static int iscsi_iser_get_ep_param(struc
 	}
 	return -ENOSYS;
 }
+#endif
 
 /**
  * iscsi_iser_ep_connect() - Initiate iSER connection establishment
@@ -916,7 +991,12 @@ iscsi_iser_ep_disconnect(struct iscsi_en
 	iscsi_destroy_endpoint(ep);
 }
 
+#ifdef HAVE_ISCSI_ATTR_IS_VISIBLE
+#ifdef HAVE_ATTR_IS_VISIBLE_RET_UMODE_T
 static umode_t iser_attr_is_visible(int param_type, int param)
+#else
+static mode_t iser_attr_is_visible(int param_type, int param)
+#endif
 {
 	switch (param_type) {
 	case ISCSI_HOST_PARAM:
@@ -960,7 +1040,9 @@ static umode_t iser_attr_is_visible(int
 		case ISCSI_PARAM_TGT_RESET_TMO:
 		case ISCSI_PARAM_IFACE_NAME:
 		case ISCSI_PARAM_INITIATOR_NAME:
+#ifdef HAVE_ISCSI_DISCOVERY_SESSION
 		case ISCSI_PARAM_DISCOVERY_SESS:
+#endif
 			return S_IRUGO;
 		default:
 			return 0;
@@ -969,7 +1051,9 @@ static umode_t iser_attr_is_visible(int
 
 	return 0;
 }
+#endif
 
+#ifdef HAVE_BLK_QUEUE_VIRT_BOUNDARY
 static int iscsi_iser_slave_alloc(struct scsi_device *sdev)
 {
 	struct iscsi_session *session;
@@ -993,29 +1077,47 @@ static int iscsi_iser_slave_alloc(struct
 
 	return 0;
 }
+#endif
 
 static struct scsi_host_template iscsi_iser_sht = {
 	.module                 = THIS_MODULE,
 	.name                   = "iSCSI Initiator over iSER",
 	.queuecommand           = iscsi_queuecommand,
+#ifdef HAVE_SCSI_CHANGE_QUEUE_DEPTH
 	.change_queue_depth	= scsi_change_queue_depth,
+#else
+	.change_queue_depth	= iscsi_change_queue_depth,
+#endif
 	.sg_tablesize           = ISCSI_ISER_DEF_SG_TABLESIZE,
 	.cmd_per_lun            = ISER_DEF_CMD_PER_LUN,
+#ifdef HAVE_ISCSI_EH_CMD_TIMED_OUT
 	.eh_timed_out		= iscsi_eh_cmd_timed_out,
+#endif
 	.eh_abort_handler       = iscsi_eh_abort,
 	.eh_device_reset_handler= iscsi_eh_device_reset,
 	.eh_target_reset_handler = iscsi_eh_recover_target,
 	.target_alloc		= iscsi_target_alloc,
+#ifdef ENABLE_CLUSTERING
+	.use_clustering		= ENABLE_CLUSTERING,
+#endif
+#ifdef HAVE_BLK_QUEUE_VIRT_BOUNDARY
 	.slave_alloc            = iscsi_iser_slave_alloc,
+#endif
 	.proc_name              = "iscsi_iser",
 	.this_id                = -1,
+#ifdef HAVE_SCSI_HOST_TEMPLATE_TRACK_QUEUE_DEPTH
 	.track_queue_depth	= 1,
+#endif
 };
 
 static struct iscsi_transport iscsi_iser_transport = {
 	.owner                  = THIS_MODULE,
 	.name                   = "iser",
+#ifdef HAVE_ISCSI_DISCOVERY_SESSION
 	.caps                   = CAP_RECOVERY_L0 | CAP_MULTI_R2T | CAP_TEXT_NEGO,
+#else
+	.caps			= CAP_RECOVERY_L0 | CAP_MULTI_R2T,
+#endif
 	/* session management */
 	.create_session         = iscsi_iser_session_create,
 	.destroy_session        = iscsi_iser_session_destroy,
@@ -1023,10 +1125,14 @@ static struct iscsi_transport iscsi_iser
 	.create_conn            = iscsi_iser_conn_create,
 	.bind_conn              = iscsi_iser_conn_bind,
 	.destroy_conn           = iscsi_conn_teardown,
+#ifdef HAVE_ISCSI_ATTR_IS_VISIBLE
 	.attr_is_visible	= iser_attr_is_visible,
+#endif
 	.set_param              = iscsi_iser_set_param,
 	.get_conn_param		= iscsi_conn_get_param,
+#ifdef HAVE_ISCSI_GET_EP_PARAM
 	.get_ep_param		= iscsi_iser_get_ep_param,
+#endif
 	.get_session_param	= iscsi_session_get_param,
 	.start_conn             = iscsi_iser_conn_start,
 	.stop_conn              = iscsi_iser_conn_stop,
@@ -1040,7 +1146,9 @@ static struct iscsi_transport iscsi_iser
 	.xmit_task		= iscsi_iser_task_xmit,
 	.cleanup_task		= iscsi_iser_cleanup_task,
 	.alloc_pdu		= iscsi_iser_pdu_alloc,
+#ifdef HAVE_ISCSI_TRANSPORT_CHECK_PROTECTION
 	.check_protection	= iscsi_iser_check_protection,
+#endif
 	/* recovery */
 	.session_recovery_timedout = iscsi_session_recovery_timedout,
 
@@ -1060,6 +1168,13 @@ static int __init iser_init(void)
 		return -EINVAL;
 	}
 
+#ifndef HAVE_SCSI_CMND_PROT_FLAGS
+	if (iser_pi_guard < 0 || iser_pi_guard > 1) {
+		iser_err("Invalid pi_guard value of %d\n", iser_pi_guard);
+		return -EINVAL;
+	}
+#endif
+
 	memset(&ig, 0, sizeof(struct iser_global));
 
 	ig.desc_cache = kmem_cache_create("iser_descriptors",
