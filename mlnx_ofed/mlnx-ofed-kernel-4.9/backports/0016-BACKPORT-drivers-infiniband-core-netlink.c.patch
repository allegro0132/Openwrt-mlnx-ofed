From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/netlink.c

Change-Id: I0ad1e7f4850a3089fa22bb47c6bb142142351faa
---
 drivers/infiniband/core/netlink.c | 133 ++++++++++++++++++++++++++++--
 1 file changed, 127 insertions(+), 6 deletions(-)

--- a/drivers/infiniband/core/netlink.c
+++ b/drivers/infiniband/core/netlink.c
@@ -46,16 +46,29 @@
 #include "core_priv.h"
 
 static DEFINE_MUTEX(rdma_nl_mutex);
+
+#if !defined(HAVE_NETLINK_DUMP_CONTROL_DUMP) ||\
+	!defined(HAVE_STRUCT_CLASS_NS_TYPE) || !defined(HAVE_PERENT_OPERATIONS_ID)
+static struct sock *nls;
+#endif
+
 static struct {
 	const struct rdma_nl_cbs   *cb_table;
 } rdma_nl_types[RDMA_NL_NUM_CLIENTS];
 
+#if defined(HAVE_STRUCT_CLASS_NS_TYPE) && defined(HAVE_PERENT_OPERATIONS_ID)
 bool rdma_nl_chk_listeners(unsigned int group)
 {
 	struct rdma_dev_net *rnet = rdma_net_to_dev_net(&init_net);
 
 	return netlink_has_listeners(rnet->nl_sock, group);
 }
+#else
+bool rdma_nl_chk_listeners(unsigned int group)
+{
+	return netlink_has_listeners(nls, group);
+}
+#endif
 EXPORT_SYMBOL(rdma_nl_chk_listeners);
 
 static bool is_nl_msg_valid(unsigned int type, unsigned int op)
@@ -103,6 +116,7 @@ is_nl_valid(const struct sk_buff *skb, u
 
 	if (!cb_table || (!cb_table[op].dump && !cb_table[op].doit))
 		return false;
+
 	return true;
 }
 
@@ -166,8 +180,12 @@ int ibnl_put_attr(struct sk_buff *skb, s
 }
 EXPORT_SYMBOL(ibnl_put_attr);
 
+#ifdef HAVE_NETLINK_EXT_ACK
 static int rdma_nl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 			   struct netlink_ext_ack *extack)
+#else
+static int rdma_nl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
+#endif
 {
 	int type = nlh->nlmsg_type;
 	unsigned int index = RDMA_NL_GET_CLIENT(type);
@@ -180,7 +198,11 @@ static int rdma_nl_rcv_msg(struct sk_buf
 	cb_table = rdma_nl_types[index].cb_table;
 
 	if ((cb_table[op].flags & RDMA_NL_ADMIN_PERM) &&
+#ifdef HAVE_NETLINK_CAPABLE
 	    !netlink_capable(skb, CAP_NET_ADMIN))
+#else
+	    sock_net(skb->sk) != &init_net)
+#endif
 		return -EPERM;
 
 	/*
@@ -189,21 +211,35 @@ static int rdma_nl_rcv_msg(struct sk_buf
 	 */
 	if (index == RDMA_NL_LS) {
 		if (cb_table[op].doit)
-			return cb_table[op].doit(skb, nlh, extack);
+#ifdef HAVE_NETLINK_EXT_ACK
+	     		return cb_table[op].doit(skb, nlh, extack);
+#else
+			return cb_table[op].doit(skb, nlh);
+#endif
 		return -EINVAL;
 	}
 	/* FIXME: Convert IWCM to properly handle doit callbacks */
 	if ((nlh->nlmsg_flags & NLM_F_DUMP) || index == RDMA_NL_IWCM) {
+#ifdef HAVE_NETLINK_DUMP_CONTROL_DUMP
 		struct netlink_dump_control c = {
 			.dump = cb_table[op].dump,
 		};
 		if (c.dump)
 			return netlink_dump_start(skb->sk, skb, nlh, &c);
+#else
+		return netlink_dump_start(nls, skb, nlh,
+					  cb_table[op].dump,
+					  NULL, 0);
+#endif
 		return -EINVAL;
 	}
 
 	if (cb_table[op].doit)
+#ifdef HAVE_NETLINK_EXT_ACK
 		return cb_table[op].doit(skb, nlh, extack);
+#else
+		return cb_table[op].doit(skb, nlh);
+#endif
 
 	return 0;
 }
@@ -215,10 +251,16 @@ static int rdma_nl_rcv_msg(struct sk_buf
  * for that consumer only.
  */
 static int rdma_nl_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *,
+#ifdef HAVE_NETLINK_EXT_ACK
 						   struct nlmsghdr *,
 						   struct netlink_ext_ack *))
+#else
+						   struct nlmsghdr *))
+#endif
 {
+#ifdef HAVE_NETLINK_EXT_ACK
 	struct netlink_ext_ack extack = {};
+#endif
 	struct nlmsghdr *nlh;
 	int err;
 
@@ -246,13 +288,21 @@ static int rdma_nl_rcv_skb(struct sk_buf
 		if (nlh->nlmsg_type < NLMSG_MIN_TYPE)
 			goto ack;
 
+#ifdef HAVE_NETLINK_EXT_ACK
 		err = cb(skb, nlh, &extack);
+#else
+		err = cb(skb, nlh);
+#endif
 		if (err == -EINTR)
 			goto skip;
 
 ack:
 		if (nlh->nlmsg_flags & NLM_F_ACK || err)
+#ifdef HAVE_NETLINK_EXT_ACK
 			netlink_ack(skb, nlh, err, &extack);
+#else
+			netlink_ack(skb, nlh, err);
+#endif
 
 skip:
 		msglen = NLMSG_ALIGN(nlh->nlmsg_len);
@@ -271,6 +321,7 @@ static void rdma_nl_rcv(struct sk_buff *
 	mutex_unlock(&rdma_nl_mutex);
 }
 
+#if defined(HAVE_STRUCT_CLASS_NS_TYPE) && defined(HAVE_PERENT_OPERATIONS_ID)
 int rdma_nl_unicast(struct net *net, struct sk_buff *skb, u32 pid)
 {
 	struct rdma_dev_net *rnet = rdma_net_to_dev_net(net);
@@ -313,23 +364,93 @@ void rdma_nl_exit(void)
 int rdma_nl_net_init(struct rdma_dev_net *rnet)
 {
 	struct net *net = read_pnet(&rnet->net);
+#ifdef HAVE_NETLINK_KERNEL_CFG_INPUT
+       struct netlink_kernel_cfg cfg = {
+       	.input	= rdma_nl_rcv,
+       };
+       struct sock *nls;
+
+#ifdef HAVE_NETLINK_KERNEL_CREATE_3_PARAMS
+       nls = netlink_kernel_create(net, NETLINK_RDMA, &cfg);
+#else
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, THIS_MODULE, &cfg);
+#endif
+#else /* HAVE_NETLINK_KERNEL_CFG_INPUT */
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, 0, rdma_nl_rcv,
+				    NULL, THIS_MODULE);
+#endif /* HAVE_NETLINK_KERNEL_CFG_INPUT */
+	if (!nls)
+		return -ENOMEM;
+
+	nls->sk_sndtimeo = 10 * HZ;
+	rnet->nl_sock = nls;
+	return 0;
+}
+
+void rdma_nl_net_exit(struct rdma_dev_net *rnet)
+{
+	netlink_kernel_release(rnet->nl_sock);
+}
+
+#else
+
+int rdma_nl_unicast(struct net *net, struct sk_buff *skb, u32 pid)
+{
+	int err;
+
+	err = netlink_unicast(nls, skb, pid, MSG_DONTWAIT);
+	return (err < 0) ? err : 0;
+}
+EXPORT_SYMBOL(rdma_nl_unicast);
+
+int rdma_nl_unicast_wait(struct net *net, struct sk_buff *skb, __u32 pid)
+{
+	int err;
+
+	err = netlink_unicast(nls, skb, pid, 0);
+	return (err < 0) ? err : 0;
+}
+EXPORT_SYMBOL(rdma_nl_unicast_wait);
+
+int rdma_nl_multicast(struct net *net, struct sk_buff *skb,
+		      unsigned int group, gfp_t flags)
+{
+	return nlmsg_multicast(nls, skb, 0, group, flags);
+}
+EXPORT_SYMBOL(rdma_nl_multicast);
+
+int __init rdma_nl_init(void)
+{
+#ifdef HAVE_NETLINK_KERNEL_CFG_INPUT
 	struct netlink_kernel_cfg cfg = {
 		.input	= rdma_nl_rcv,
 	};
-	struct sock *nls;
 
-	nls = netlink_kernel_create(net, NETLINK_RDMA, &cfg);
+#ifdef HAVE_NETLINK_KERNEL_CREATE_3_PARAMS
+       nls = netlink_kernel_create(&init_net, NETLINK_RDMA, &cfg);
+#else
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, THIS_MODULE, &cfg);
+#endif
+#else /* HAVE_NETLINK_KERNEL_CFG_INPUT */
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, 0, rdma_nl_rcv,
+				    NULL, THIS_MODULE);
+#endif /* HAVE_NETLINK_KERNEL_CFG_INPUT */
 	if (!nls)
 		return -ENOMEM;
 
 	nls->sk_sndtimeo = 10 * HZ;
-	rnet->nl_sock = nls;
 	return 0;
 }
 
-void rdma_nl_net_exit(struct rdma_dev_net *rnet)
+void rdma_nl_exit(void)
 {
-	netlink_kernel_release(rnet->nl_sock);
+	int idx;
+
+	for (idx = 0; idx < RDMA_NL_NUM_CLIENTS; idx++)
+		rdma_nl_unregister(idx);
+
+	netlink_kernel_release(nls);
 }
+#endif
 
 MODULE_ALIAS_NET_PF_PROTO(PF_NETLINK, NETLINK_RDMA);
