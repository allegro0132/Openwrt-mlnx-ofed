From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/uverbs_main.c

Change-Id: I44af59c4c1ca183f92a6c31d4a88c8aa1bc10a4a
---
 drivers/infiniband/core/uverbs_main.c | 84 ++++++++++++++++++++++++++++++++---
 1 file changed, 78 insertions(+), 6 deletions(-)

--- a/drivers/infiniband/core/uverbs_main.c
+++ b/drivers/infiniband/core/uverbs_main.c
@@ -62,6 +62,9 @@
 MODULE_AUTHOR("Roland Dreier");
 MODULE_DESCRIPTION("InfiniBand userspace verbs access");
 MODULE_LICENSE("Dual BSD/GPL");
+#ifdef RETPOLINE_MLNX
+MODULE_INFO(retpoline, "Y");
+#endif
 
 enum {
 	IB_UVERBS_MAJOR       = 231,
@@ -76,7 +79,11 @@ enum {
 static dev_t dynamic_uverbs_dev;
 static struct class *uverbs_class;
 
+#ifndef HAVE_IDA_ALLOC_MAX
+static DECLARE_BITMAP(dev_map, IB_UVERBS_MAX_DEVICES);
+#else
 static DEFINE_IDA(uverbs_ida);
+#endif
 static void ib_uverbs_add_one(struct ib_device *device);
 static void ib_uverbs_remove_one(struct ib_device *device, void *client_data);
 
@@ -91,8 +98,12 @@ struct ib_ucontext *ib_uverbs_get_uconte
 	 * srcu is used. It does not matter if someone races this with
 	 * get_context, we get NULL or valid ucontext.
 	 */
+#ifdef HAVE_SMP_LOAD_ACQUIRE
 	struct ib_ucontext *ucontext = smp_load_acquire(&ufile->ucontext);
-
+#else
+	struct ib_ucontext *ucontext = ufile->ucontext;
+	smp_wmb();
+#endif
 	if (!srcu_dereference(ufile->device->ib_dev,
 			      &ufile->device->disassociate_srcu))
 		return ERR_PTR(-EIO);
@@ -482,7 +493,12 @@ void ib_uverbs_init_async_event_file(
 	if (!uverbs_file->async_file) {
 		/* Pairs with the put in ib_uverbs_release_file */
 		uverbs_uobject_get(&async_file->uobj);
+#ifdef HAVE_SMP_LOAD_ACQUIRE
 		smp_store_release(&uverbs_file->async_file, async_file);
+#else
+		smp_wmb();
+		uverbs_file->async_file = async_file;
+#endif
 	}
 	mutex_unlock(&uverbs_file->ucontext_lock);
 
@@ -514,8 +530,14 @@ static ssize_t verify_hdr(struct ib_uver
 			if (hdr->out_words * 8 < method_elm->resp_size)
 				return -ENOSPC;
 
+#ifdef HAVE_ACCESS_OK_HAS_3_PARAMS 
+ 			if (!access_ok(VERIFY_WRITE,
+ 				       u64_to_user_ptr(ex_hdr->response),
+ 				       (hdr->out_words + ex_hdr->provider_out_words) * 8))
+#else
 			if (!access_ok(u64_to_user_ptr(ex_hdr->response),
 				       (hdr->out_words + ex_hdr->provider_out_words) * 8))
+#endif
 				return -EFAULT;
 		} else {
 			if (hdr->out_words || ex_hdr->provider_out_words)
@@ -599,9 +621,13 @@ static ssize_t verify_exp_hdr(struct ib_
 	if (ex_hdr->response) {
 		if (!hdr->out_words && !ex_hdr->provider_out_words)
 			return -EINVAL;
-
+#ifdef HAVE_ACCESS_OK_HAS_3_PARAMS
+		if (!access_ok(VERIFY_WRITE, u64_to_user_ptr(ex_hdr->response),
+			       (hdr->out_words + ex_hdr->provider_out_words) * 8))
+#else
 		if (!access_ok(u64_to_user_ptr(ex_hdr->response),
 			       (hdr->out_words + ex_hdr->provider_out_words) * 8))
+#endif
 			return -EFAULT;
 	} else {
 		if (hdr->out_words || ex_hdr->provider_out_words)
@@ -905,11 +931,20 @@ static void rdma_umap_close(struct vm_ar
  * Once the zap_vma_ptes has been called touches to the VMA will come here and
  * we return a dummy writable zero page for all the pfns.
  */
+#ifdef HAVE_VM_FAULT_T
+#ifdef HAVE_VM_OPERATIONS_STRUCT_HAS_FAULT
 static vm_fault_t rdma_umap_fault(struct vm_fault *vmf)
+#else
+static int rdma_umap_fault(struct vm_fault *vmf)
+#endif/*HAVE_VM_OPERATIONS_STRUCT_HAS_FAULT*/
 {
 	struct ib_uverbs_file *ufile = vmf->vma->vm_file->private_data;
 	struct rdma_umap_priv *priv = vmf->vma->vm_private_data;
+#ifdef HAVE_VM_FAULT_T
 	vm_fault_t ret = 0;
+#else
+	int ret = 0;
+#endif
 
 	if (!priv)
 		return VM_FAULT_SIGBUS;
@@ -940,11 +975,13 @@ static vm_fault_t rdma_umap_fault(struct
 
 	return ret;
 }
-
+#endif
 static const struct vm_operations_struct rdma_umap_ops = {
 	.open = rdma_umap_open,
 	.close = rdma_umap_close,
+#ifdef HAVE_VM_FAULT_T
 	.fault = rdma_umap_fault,
+#endif
 };
 
 void uverbs_user_mmap_disassociate(struct ib_uverbs_file *ufile)
@@ -1000,11 +1037,16 @@ void uverbs_user_mmap_disassociate(struc
 
 			zap_vma_ptes(vma, vma->vm_start,
 				     vma->vm_end - vma->vm_start);
-
+#ifndef HAVE_VM_FAULT_T
+			vma->vm_flags &= ~(VM_SHARED | VM_MAYSHARE);
+			vma->vm_ops = NULL;
+			kfree(priv);
+#else
 			if (priv->entry) {
 				rdma_user_mmap_entry_put(priv->entry);
 				priv->entry = NULL;
 			}
+#endif
 		}
 		mutex_unlock(&ufile->umap_lock);
 	skip_mm:
@@ -1089,8 +1131,11 @@ static int ib_uverbs_open(struct inode *
 	srcu_read_unlock(&dev->disassociate_srcu, srcu_key);
 
 	setup_ufile_idr_uobject(file);
-
+#ifdef HAVE_STREAM_OPEN
 	return stream_open(inode, filp);
+#else
+	return nonseekable_open(inode, filp);
+#endif
 
 err_module:
 	module_put(ib_dev->owner);
@@ -1197,8 +1242,16 @@ static const struct attribute_group dev_
 	.attrs = ib_dev_attrs,
 };
 
+#ifdef HAVE_CLASS_ATTR_STRING
 static CLASS_ATTR_STRING(abi_version, S_IRUGO,
 			 __stringify(IB_USER_VERBS_ABI_VERSION));
+#else
+static ssize_t show_abi_version(struct class *class, char *buf)
+{
+	return sprintf(buf, "%d\n", IB_USER_VERBS_ABI_VERSION);
+}
+static CLASS_ATTR(abi_version, S_IRUGO, show_abi_version, NULL);
+#endif
 
 static int ib_uverbs_create_uapi(struct ib_device *device,
 				 struct ib_uverbs_device *uverbs_dev)
@@ -1248,11 +1301,19 @@ static void ib_uverbs_add_one(struct ib_
 	rcu_assign_pointer(uverbs_dev->ib_dev, device);
 	uverbs_dev->num_comp_vectors = device->num_comp_vectors;
 
+#ifdef HAVE_IDA_ALLOC_MAX
 	devnum = ida_alloc_max(&uverbs_ida, IB_UVERBS_MAX_DEVICES - 1,
 			       GFP_KERNEL);
 	if (devnum < 0)
+#else
+	devnum = find_first_zero_bit(dev_map, IB_UVERBS_MAX_DEVICES);
+	if (devnum >= IB_UVERBS_MAX_DEVICES)
+#endif
 		goto err;
 	uverbs_dev->devnum = devnum;
+#ifndef HAVE_IDA_ALLOC_MAX
+	set_bit(devnum, dev_map);
+#endif
 	if (devnum >= IB_UVERBS_NUM_FIXED_MINOR)
 		base = dynamic_uverbs_dev + devnum - IB_UVERBS_NUM_FIXED_MINOR;
 	else
@@ -1279,7 +1340,11 @@ static void ib_uverbs_add_one(struct ib_
 	return;
 
 err_uapi:
+#ifndef HAVE_IDA_ALLOC_MAX
+	clear_bit(devnum, dev_map);
+#else
 	ida_free(&uverbs_ida, devnum);
+#endif
 err:
 	if (atomic_dec_and_test(&uverbs_dev->refcount))
 		ib_uverbs_comp_dev(uverbs_dev);
@@ -1315,7 +1380,6 @@ static void ib_uverbs_free_hw_resources(
 
 		uverbs_destroy_ufile_hw(file, RDMA_REMOVE_DRIVER_REMOVE);
 		kref_put(&file->ref, ib_uverbs_release_file);
-
 		mutex_lock(&uverbs_dev->lists_mutex);
 	}
 	mutex_unlock(&uverbs_dev->lists_mutex);
@@ -1332,7 +1396,11 @@ static void ib_uverbs_remove_one(struct
 		return;
 
 	cdev_device_del(&uverbs_dev->cdev, &uverbs_dev->dev);
+#ifndef HAVE_IDA_ALLOC_MAX
+	clear_bit(uverbs_dev->devnum, dev_map);
+#else
 	ida_free(&uverbs_ida, uverbs_dev->devnum);
+#endif
 
 	if (device->ops.disassociate_ucontext) {
 		/* We disassociate HW resources and immediately return.
@@ -1358,7 +1426,11 @@ static void ib_uverbs_remove_one(struct
 	put_device(&uverbs_dev->dev);
 }
 
+#ifdef HAVE_CLASS_DEVNODE_UMODE_T
 static char *uverbs_devnode(struct device *dev, umode_t *mode)
+#else
+static char *uverbs_devnode(struct device *dev, mode_t *mode)
+#endif
 {
 	if (mode)
 		*mode = 0666;
@@ -1394,7 +1466,12 @@ static int __init ib_uverbs_init(void)
 
 	uverbs_class->devnode = uverbs_devnode;
 
+#ifdef HAVE_CLASS_ATTR_STRING
 	ret = class_create_file(uverbs_class, &class_attr_abi_version.attr);
+#else
+	ret = class_create_file(uverbs_class, &class_attr_abi_version);
+#endif
+
 	if (ret) {
 		pr_err("user_verbs: couldn't create abi_version attribute\n");
 		goto out_class;
