From: Feras Daoud <ferasda@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/addr.c

Change-Id: I9d3d108e2ae2c20836813443fa7c10924b357c17
---
 drivers/infiniband/core/addr.c | 178 +++++++++++++++++++++++++++++++--
 1 file changed, 170 insertions(+), 8 deletions(-)

--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@ -42,7 +42,9 @@
 #include <net/neighbour.h>
 #include <net/route.h>
 #include <net/netevent.h>
+#ifdef HAVE_IPV6_STUBS_H
 #include <net/ipv6_stubs.h>
+#endif
 #include <net/ip6_route.h>
 #include <rdma/ib_addr.h>
 #include <rdma/ib_cache.h>
@@ -50,6 +52,7 @@
 #include <rdma/ib.h>
 #include <rdma/rdma_netlink.h>
 #include <net/netlink.h>
+#include <linux/ratelimit.h>
 
 #include "core_priv.h"
 
@@ -86,9 +89,12 @@ static inline bool ib_nl_is_good_ip_resp
 
 	if (nlh->nlmsg_flags & RDMA_NL_LS_F_ERR)
 		return false;
-
+#ifdef HAVE_NLA_PARSE_DEPRECATED
 	ret = nla_parse_deprecated(tb, LS_NLA_TYPE_MAX - 1, nlmsg_data(nlh),
-				   nlmsg_len(nlh), ib_nl_addr_policy, NULL);
+#else
+	ret = nla_parse(tb, LS_NLA_TYPE_MAX - 1, nlmsg_data(nlh),
+#endif
+	                        nlmsg_len(nlh), ib_nl_addr_policy, NULL);
 	if (ret)
 		return false;
 
@@ -129,11 +135,23 @@ static void ib_nl_process_good_ip_rsep(c
 }
 
 int ib_nl_handle_ip_res_resp(struct sk_buff *skb,
+#ifdef HAVE_NETLINK_EXT_ACK
 			     struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
+#else
+			     struct nlmsghdr *nlh)
+#endif
 {
 	if ((nlh->nlmsg_flags & NLM_F_REQUEST) ||
+#ifdef HAVE_NETLINK_CAPABLE
+#ifdef HAVE_NETLINK_SKB_PARMS_SK
 	    !(NETLINK_CB(skb).sk))
+#else
+	    !(NETLINK_CB(skb).ssk))
+#endif
+#else
+	    sock_net(skb->sk) != &init_net)
+#endif
 		return -EPERM;
 
 	if (ib_nl_is_good_ip_resp(nlh))
@@ -177,7 +195,8 @@ static int ib_nl_ip_send_msg(struct rdma
 	}
 
 	/* Construct the family header first */
-	header = skb_put(skb, NLMSG_ALIGN(sizeof(*header)));
+	header = (struct rdma_ls_ip_resolve_header *)
+		skb_put(skb, NLMSG_ALIGN(sizeof(*header)));
 	header->ifindex = dev_addr->bound_dev_if;
 	nla_put(skb, attrtype, size, daddr);
 
@@ -249,17 +268,30 @@ rdma_find_ndev_for_src_ip_rcu(struct net
 
 	switch (src_in->sa_family) {
 	case AF_INET:
+#ifdef HAVE___IP_DEV_FIND
 		dev = __ip_dev_find(net,
 				    ((const struct sockaddr_in *)src_in)->sin_addr.s_addr,
 				    false);
 		if (dev)
 			ret = 0;
+#else
+		dev = ip_dev_find(net,
+				   ((const struct sockaddr_in *)src_in)->sin_addr.s_addr);
+		if(dev) {
+			dev_put(dev);
+			ret = 0;
+		}
+#endif
 		break;
 #if IS_ENABLED(CONFIG_IPV6)
 	case AF_INET6:
 		for_each_netdev_rcu(net, dev) {
 			if (ipv6_chk_addr(net,
-					  &((const struct sockaddr_in6 *)src_in)->sin6_addr,
+#if defined(HAVE_IPV6_CHK_ADDR_TAKES_CONST)
+ 					  &((const struct sockaddr_in6 *)src_in)->sin6_addr,
+#else
+					  &((struct sockaddr_in6 *)src_in)->sin6_addr,
+#endif
 					  dev, 1)) {
 				ret = 0;
 				break;
@@ -322,14 +354,23 @@ static int ib_nl_fetch_ha(struct rdma_de
 	return ib_nl_ip_send_msg(dev_addr, daddr, seq, family);
 }
 
+#ifdef HAVE_DST_NEIGH_LOOKUP
 static int dst_fetch_ha(const struct dst_entry *dst,
 			struct rdma_dev_addr *dev_addr,
 			const void *daddr)
+#else
+static int dst_fetch_ha(const struct dst_entry *dst,
+			struct rdma_dev_addr *addr)
+#endif
 {
 	struct neighbour *n;
 	int ret = 0;
 
+#ifdef HAVE_DST_NEIGH_LOOKUP
 	n = dst_neigh_lookup(dst, daddr);
+#else
+	n = dst_get_neighbour((struct dst_entry *)dst);
+#endif
 	if (!n)
 		return -ENODATA;
 
@@ -337,25 +378,48 @@ static int dst_fetch_ha(const struct dst
 		neigh_event_send(n, NULL);
 		ret = -ENODATA;
 	} else {
+#ifdef HAVE_DST_NEIGH_LOOKUP
 		memcpy(dev_addr->dst_dev_addr, n->ha, MAX_ADDR_LEN);
+#else
+		memcpy(addr->dst_dev_addr, n->ha, MAX_ADDR_LEN);
+#endif
 	}
 
+#ifdef HAVE_DST_NEIGH_LOOKUP
 	neigh_release(n);
-
+#endif
 	return ret;
 }
 
+#ifdef HAVE_RT_USES_GATEWAY
 static bool has_gateway(const struct dst_entry *dst, sa_family_t family)
+#else
+static bool has_gateway(const struct dst_entry *dst, const void *daddr, sa_family_t family)
+#endif
 {
 	struct rtable *rt;
 	struct rt6_info *rt6;
 
 	if (family == AF_INET) {
+#ifdef HAVE_RT_DIRECT_DST
 		rt = container_of(dst, struct rtable, dst);
+#else
+		rt = container_of(dst, struct rtable, u.dst);
+#endif
+#ifdef HAVE_RT_GW_FAMILY
 		return rt->rt_gw_family == AF_INET;
+#elif defined (HAVE_RT_USES_GATEWAY)
+		return rt->rt_uses_gateway;
+#else
+		return (rt->rt_gateway != *(__be32 *)daddr);
+#endif
 	}
 
+#ifdef HAVE_RT_DIRECT_DST
 	rt6 = container_of(dst, struct rt6_info, dst);
+#else
+	rt6 = container_of(dst, struct rt6_info, u.dst);
+#endif
 	return rt6->rt6i_flags & RTF_GATEWAY;
 }
 
@@ -371,11 +435,19 @@ static int fetch_ha(const struct dst_ent
 		(const void *)&dst_in6->sin6_addr;
 	sa_family_t family = dst_in->sa_family;
 
+#ifndef HAVE_RT_USES_GATEWAY
+	if (seq && has_gateway(dst, daddr, family) && dst->dev->type == ARPHRD_INFINIBAND)
+#else
 	/* If we have a gateway in IB mode then it must be an IB network */
 	if (has_gateway(dst, family) && dev_addr->network == RDMA_NETWORK_IB)
+#endif
 		return ib_nl_fetch_ha(dev_addr, daddr, seq, family);
 	else
+#ifdef HAVE_DST_NEIGH_LOOKUP
 		return dst_fetch_ha(dst, dev_addr, daddr);
+#else
+		return  dst_fetch_ha(dst, dev_addr);
+#endif
 }
 
 static int addr4_resolve(struct sockaddr *src_sock,
@@ -390,9 +462,14 @@ static int addr4_resolve(struct sockaddr
 	__be32 src_ip = src_in->sin_addr.s_addr;
 	__be32 dst_ip = dst_in->sin_addr.s_addr;
 	struct rtable *rt;
+#ifdef HAVE_FLOWI_AF_SPECIFIC_INSTANCES
 	struct flowi4 fl4;
+#else
+	struct flowi fl;
+#endif
 	int ret;
 
+#ifdef HAVE_FLOWI_AF_SPECIFIC_INSTANCES
 	memset(&fl4, 0, sizeof(fl4));
 	fl4.daddr = dst_ip;
 	fl4.saddr = src_ip;
@@ -402,10 +479,28 @@ static int addr4_resolve(struct sockaddr
 	if (ret)
 		return ret;
 
+#else
+	memset(&fl, 0, sizeof(fl));
+	fl.nl_u.ip4_u.daddr = dst_ip;
+	fl.nl_u.ip4_u.saddr = src_ip;
+	fl.oif = addr->bound_dev_if;
+	ret = ip_route_output_key(addr->net, &rt, &fl);
+	if (ret)
+		return ret;
+#endif
+
+#ifdef HAVE_FLOWI_AF_SPECIFIC_INSTANCES
 	src_in->sin_addr.s_addr = fl4.saddr;
+#else
+	src_in->sin_addr.s_addr = rt->rt_src;
+#endif
 
+#ifdef HAVE_RT_DIRECT_DST
 	addr->hoplimit = ip4_dst_hoplimit(&rt->dst);
 
+#else
+	addr->hoplimit = ip4_dst_hoplimit(&rt->u.dst);
+#endif
 	*prt = rt;
 	return 0;
 }
@@ -419,31 +514,79 @@ static int addr6_resolve(struct sockaddr
 	struct sockaddr_in6 *src_in = (struct sockaddr_in6 *)src_sock;
 	const struct sockaddr_in6 *dst_in =
 				(const struct sockaddr_in6 *)dst_sock;
+#ifdef HAVE_FLOWI_AF_SPECIFIC_INSTANCES
 	struct flowi6 fl6;
+#else /* HAVE_FLOWI_AF_SPECIFIC_INSTANCES */
+	struct flowi fl;
+#endif /* HAVE_FLOWI_AF_SPECIFIC_INSTANCES */
 	struct dst_entry *dst;
 	int ret;
-
+#ifdef HAVE_IPV6_MOD_ENABLED
 	if (!ipv6_mod_enabled())
 		return -EADDRNOTAVAIL;
+#endif
 
+#ifdef HAVE_FLOWI_AF_SPECIFIC_INSTANCES
 	memset(&fl6, 0, sizeof fl6);
 	fl6.daddr = dst_in->sin6_addr;
 	fl6.saddr = src_in->sin6_addr;
 	fl6.flowi6_oif = addr->bound_dev_if;
 
+#if defined(HAVE_IPV6_STUB) && defined(HAVE_IPV6_DST_LOOKUP_FLOW)
+	dst = ipv6_stub->ipv6_dst_lookup_flow(addr->net, NULL, &fl6, NULL);
+	if (IS_ERR(dst))
+		return PTR_ERR(dst);
+#elif defined(HAVE_IPV6_STUB) && defined(HAVE_IPV6_DST_LOOKUP_TAKES_NET)
 	ret = ipv6_stub->ipv6_dst_lookup(addr->net, NULL, &dst, &fl6);
 	if (ret < 0)
 		return ret;
+#else /* HAVE_IPV6_STUB && HAVE_IPV6_DST_LOOKUP_TAKES_NET */
+	dst = ip6_route_output(addr->net, NULL, &fl6);
+	if ((ret = dst->error))
+		return ret;
+	if (ipv6_addr_any(&src_in->sin6_addr)) {
+		ret = ipv6_dev_get_saddr(addr->net, ip6_dst_idev(dst)->dev,
+					 &fl6.daddr, 0, &fl6.saddr);
+		if (ret)
+			goto put;
+	}
+#endif /* HAVE_IPV6_STUB && HAVE_IPV6_DST_LOOKUP_TAKES_NET */
 
 	if (ipv6_addr_any(&src_in->sin6_addr))
 		src_in->sin6_addr = fl6.saddr;
 
+#else /* HAVE_FLOWI_AF_SPECIFIC_INSTANCES */
+	memset(&fl, 0, sizeof fl);
+	ipv6_addr_copy(&fl.fl6_dst, &dst_in->sin6_addr);
+	ipv6_addr_copy(&fl.fl6_src, &src_in->sin6_addr);
+	fl.oif = addr->bound_dev_if;
+
+	dst = ip6_route_output(addr->net, NULL, &fl);
+	ret = dst->error;
+	if (ret)
+		return ret;
+
+	if (ipv6_addr_any(&fl.fl6_src)) {
+		ret = ipv6_dev_get_saddr(addr->net, ip6_dst_idev(dst)->dev,
+					 &fl.fl6_dst, 0, &fl.fl6_src);
+		if (ret)
+			goto put;
+
+		src_in->sin6_family = AF_INET6;
+		ipv6_addr_copy(&src_in->sin6_addr, &fl.fl6_src);
+	}
+#endif /* HAVE_FLOWI_AF_SPECIFIC_INSTANCES */
 	addr->hoplimit = ip6_dst_hoplimit(dst);
 
 	*pdst = dst;
 	return 0;
+#if !(defined(HAVE_FLOWI_AF_SPECIFIC_INSTANCES) && defined(HAVE_IPV6_STUB) && defined(HAVE_IPV6_DST_LOOKUP_TAKES_NET))
+put:
+#endif
+	dst_release(dst);
+	return ret;
 }
-#else
+#else /* IS_ENABLED(CONFIG_IPV6) */
 static int addr6_resolve(struct sockaddr *src_sock,
 			 const struct sockaddr *dst_sock,
 			 struct rdma_dev_addr *addr,
@@ -451,7 +594,7 @@ static int addr6_resolve(struct sockaddr
 {
 	return -EADDRNOTAVAIL;
 }
-#endif
+#endif /*IS_ENABLED(CONFIG_IPV6) */
 
 static int addr_resolve_neigh(const struct dst_entry *dst,
 			      const struct sockaddr *dst_in,
@@ -478,6 +621,15 @@ static int copy_src_l2_addr(struct rdma_
 			    const struct net_device *ndev)
 {
 	int ret = 0;
+#ifndef HAVE_RT_USES_GATEWAY
+	const struct sockaddr_in *dst_in4 =
+		(const struct sockaddr_in *)dst_in;
+	const struct sockaddr_in6 *dst_in6 =
+		(const struct sockaddr_in6 *)dst_in;
+	const void *daddr = (dst_in->sa_family == AF_INET) ?
+		(const void *)&dst_in4->sin_addr.s_addr :
+		(const void *)&dst_in6->sin6_addr;
+#endif
 
 	if (dst->dev->flags & IFF_LOOPBACK)
 		ret = rdma_translate_ip(dst_in, dev_addr);
@@ -489,7 +641,11 @@ static int copy_src_l2_addr(struct rdma_
 	 * we're definitely in RoCE v2 (as RoCE v1 isn't routable) set the
 	 * network type accordingly.
 	 */
+#ifdef HAVE_RT_USES_GATEWAY
 	if (has_gateway(dst, dst_in->sa_family) &&
+#else
+	if (has_gateway(dst, daddr, dst_in->sa_family) &&
+#endif
 	    ndev->type != ARPHRD_INFINIBAND)
 		dev_addr->network = dst_in->sa_family == AF_INET ?
 						RDMA_NETWORK_IPV4 :
@@ -587,7 +743,11 @@ static int addr_resolve(struct sockaddr
 	}
 	if (src_in->sa_family == AF_INET) {
 		ret = addr4_resolve(src_in, dst_in, addr, &rt);
+#ifdef HAVE_RT_DIRECT_DST
 		dst = &rt->dst;
+#else
+		dst = &rt->u.dst;
+#endif
 	} else {
 		ret = addr6_resolve(src_in, dst_in, addr, &dst);
 	}
@@ -851,6 +1011,7 @@ int rdma_addr_find_l2_eth_by_grh(const u
 static int netevent_callback(struct notifier_block *self, unsigned long event,
 	void *ctx)
 {
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(3,0,101))
 	struct addr_req *req;
 
 	if (event == NETEVENT_NEIGH_UPDATE) {
@@ -863,6 +1024,7 @@ static int netevent_callback(struct noti
 			spin_unlock_bh(&lock);
 		}
 	}
+#endif
 	return 0;
 }
 
