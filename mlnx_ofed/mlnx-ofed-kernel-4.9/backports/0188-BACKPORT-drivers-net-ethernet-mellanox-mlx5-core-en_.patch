From: Noam Stolero <noams@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c

Change-Id: I9dd4b6d9e5d49529be7054c1d55ea8ec09461d19
---
 .../ethernet/mellanox/mlx5/core/en_ethtool.c  | 835 +++++++++++++++++-
 1 file changed, 825 insertions(+), 10 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -58,6 +58,7 @@ static void mlx5e_get_drvinfo(struct net
 	mlx5e_ethtool_get_drvinfo(priv, drvinfo);
 }
 
+#ifdef __ETHTOOL_DECLARE_LINK_MODE_MASK
 struct ptys2ethtool_config {
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(supported);
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(advertised);
@@ -195,6 +196,8 @@ void mlx5e_build_ptys2ethtool_map(void)
 				       ETHTOOL_LINK_MODE_200000baseCR4_Full_BIT);
 }
 
+#endif
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 static void mlx5e_ethtool_get_speed_arr(struct mlx5_core_dev *mdev,
 					struct ptys2ethtool_config **arr,
 					u32 *size)
@@ -205,6 +208,508 @@ static void mlx5e_ethtool_get_speed_arr(
 	*size = ext ? ARRAY_SIZE(ptys2ext_ethtool_table) :
 		      ARRAY_SIZE(ptys2legacy_ethtool_table);
 }
+#endif
+
+#ifdef HAVE_ETHTOOL_GET_SET_SETTINGS
+struct deprecated_ptys2ethtool_config {
+	u32 supported;
+	u32 advertised;
+	u32 speed;
+};
+
+static struct deprecated_ptys2ethtool_config
+deprecated_ptys2legacy_ethtool_table[MLX5E_LINK_MODES_NUMBER] = {
+	[MLX5E_1000BASE_CX_SGMII] = {
+		.supported  = SUPPORTED_1000baseKX_Full,
+		.advertised = ADVERTISED_1000baseKX_Full,
+		.speed      = SPEED_1000,
+	},
+	[MLX5E_1000BASE_KX] = {
+		.supported  = SUPPORTED_1000baseKX_Full,
+		.advertised = ADVERTISED_1000baseKX_Full,
+		.speed      = SPEED_1000,
+	},
+	[MLX5E_10GBASE_CX4] = {
+		.supported  = SUPPORTED_10000baseKX4_Full,
+		.advertised = ADVERTISED_10000baseKX4_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_10GBASE_KX4] = {
+		.supported  = SUPPORTED_10000baseKX4_Full,
+		.advertised = ADVERTISED_10000baseKX4_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_10GBASE_KR] = {
+		.supported  = SUPPORTED_10000baseKR_Full,
+		.advertised = ADVERTISED_10000baseKR_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_20GBASE_KR2] = {
+		.supported  = SUPPORTED_20000baseKR2_Full,
+		.advertised = ADVERTISED_20000baseKR2_Full,
+		.speed      = SPEED_20000,
+	},
+	[MLX5E_40GBASE_CR4] = {
+		.supported  = SUPPORTED_40000baseCR4_Full,
+		.advertised = ADVERTISED_40000baseCR4_Full,
+		.speed      = SPEED_40000,
+	},
+	[MLX5E_40GBASE_KR4] = {
+		.supported  = SUPPORTED_40000baseKR4_Full,
+		.advertised = ADVERTISED_40000baseKR4_Full,
+		.speed      = SPEED_40000,
+	},
+	[MLX5E_56GBASE_R4] = {
+		.supported  = SUPPORTED_56000baseKR4_Full,
+		.advertised = ADVERTISED_56000baseKR4_Full,
+		.speed      = SPEED_56000,
+	},
+	[MLX5E_10GBASE_CR] = {
+		.supported  = SUPPORTED_10000baseKR_Full,
+		.advertised = ADVERTISED_10000baseKR_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_10GBASE_SR] = {
+		.supported  = SUPPORTED_10000baseKR_Full,
+		.advertised = ADVERTISED_10000baseKR_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_10GBASE_ER] = {
+		.supported  = SUPPORTED_10000baseKR_Full,/* TODO: verify */
+		.advertised = ADVERTISED_10000baseKR_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_40GBASE_SR4] = {
+		.supported  = SUPPORTED_40000baseSR4_Full,
+		.advertised = ADVERTISED_40000baseSR4_Full,
+		.speed      = SPEED_40000,
+	},
+	[MLX5E_40GBASE_LR4] = {
+		.supported  = SUPPORTED_40000baseLR4_Full,
+		.advertised = ADVERTISED_40000baseLR4_Full,
+		.speed      = SPEED_40000,
+	},
+	[MLX5E_100GBASE_CR4] = {
+		.supported  = /*SUPPORTED_100000baseCR4_Full*/ 0,
+		.advertised = /*ADVERTISED_100000baseCR4_Full*/ 0,
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_100GBASE_SR4] = {
+		.supported  = /*SUPPORTED_100000baseSR4_Full*/ 0,
+		.advertised = /*ADVERTISED_100000baseSR4_Full*/ 0,
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_100GBASE_KR4] = {
+		.supported  = /*SUPPORTED_100000baseKR4_Full*/ 0,
+		.advertised = /*ADVERTISED_100000baseKR4_Full*/ 0,
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_100GBASE_LR4] = {
+		.supported  = /*SUPPORTED_1000000baseLR4_Full*/ 0,
+		.advertised = /*ADVERTISED_1000000baseLR4_Full*/ 0,
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_100BASE_TX]   = {
+		.supported  = SUPPORTED_100baseT_Full,
+		.advertised = ADVERTISED_100baseT_Full,
+		.speed      = SPEED_100,
+	},
+	[MLX5E_1000BASE_T]    = {
+		.supported  = SUPPORTED_1000baseT_Full,
+		.advertised = ADVERTISED_1000baseT_Full,
+		.speed      = SPEED_1000,
+	},
+	[MLX5E_10GBASE_T]    = {
+		.supported  = SUPPORTED_10000baseT_Full,
+		.advertised = ADVERTISED_10000baseT_Full,
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_25GBASE_CR]   = {
+		.supported  = /*SUPPORTED_25000baseCR_Full*/ 0,
+		.advertised = /*ADVERTISED_25000baseCR_Full*/ 0,
+		.speed      = SPEED_25000,
+	},
+	[MLX5E_25GBASE_KR]   = {
+		.supported  = /*SUPPORTED_25000baseKR_Full*/ 0,
+		.advertised = /*ADVERTISED_25000baseKR_Full*/ 0,
+		.speed      = SPEED_25000,
+	},
+	[MLX5E_25GBASE_SR]   = {
+		.supported  = /*SUPPORTED_25000baseSR_Full*/ 0,
+		.advertised = /*ADVERTISED_25000baseSR_Full*/ 0,
+		.speed      = SPEED_25000,
+	},
+	[MLX5E_50GBASE_CR2]  = {
+		.supported  = /*SUPPORTED_50000baseCR2_Full*/ 0,
+		.advertised = /*ADVERTISED_50000baseCR2_Full*/ 0,
+		.speed      = SPEED_50000,
+	},
+	[MLX5E_50GBASE_KR2]  = {
+		.supported  = /*SUPPORTED_50000baseKR2_Full*/ 0,
+		.advertised = /*ADVERTISED_50000baseKR2_Full*/ 0,
+		.speed      = SPEED_50000,
+	},
+};
+
+static struct deprecated_ptys2ethtool_config
+deprecated_ptys2ext_ethtool_table[MLX5E_EXT_LINK_MODES_NUMBER] = {
+	[MLX5E_SGMII_100M] = {
+		.speed      = SPEED_100,
+	},
+	[MLX5E_1000BASE_X_SGMII] = {
+		.speed      = SPEED_1000,
+	},
+	[MLX5E_5GBASE_R] = {
+		.speed      = SPEED_5000,
+	},
+	[MLX5E_10GBASE_XFI_XAUI_1] = {
+		.speed      = SPEED_10000,
+	},
+	[MLX5E_40GBASE_XLAUI_4_XLPPI_4] = {
+		.speed      = SPEED_40000,
+	},
+	[MLX5E_25GAUI_1_25GBASE_CR_KR] = {
+		.speed      = SPEED_25000,
+	},
+	[MLX5E_50GAUI_2_LAUI_2_50GBASE_CR2_KR2] = {
+		.speed      = SPEED_50000,
+	},
+	[MLX5E_50GAUI_1_LAUI_1_50GBASE_CR_KR] = {
+		.speed      = SPEED_50000,
+	},
+	[MLX5E_CAUI_4_100GBASE_CR4_KR4] = {
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_100GAUI_2_100GBASE_CR2_KR2] = {
+		.speed      = SPEED_100000,
+	},
+	[MLX5E_200GAUI_4_200GBASE_CR4_KR4] = {
+		.speed      = SPEED_200000,
+	},
+};
+
+static void
+deprecated_ethtool_get_speed_arr(bool ext, u32 *size,
+				 struct deprecated_ptys2ethtool_config **arr)
+{
+	*arr = ext ? deprecated_ptys2ext_ethtool_table :
+		     deprecated_ptys2legacy_ethtool_table;
+	*size = ext ? ARRAY_SIZE(deprecated_ptys2ext_ethtool_table) :
+		      ARRAY_SIZE(deprecated_ptys2legacy_ethtool_table);
+}
+
+static u32 deprecated_ptys2ethtool_supported_link(u32 eth_proto_cap)
+{
+	int i;
+	u32 supoprted_modes = 0;
+
+	for (i = 0; i < MLX5E_LINK_MODES_NUMBER; ++i) {
+		if (eth_proto_cap & MLX5E_PROT_MASK(i))
+			supoprted_modes |= deprecated_ptys2legacy_ethtool_table[i].supported;
+	}
+	return supoprted_modes;
+}
+
+static u32 deprecated_ptys2ethtool_adver_link(u32 eth_proto_cap)
+{
+	int i;
+	u32 advertising_modes = 0;
+
+	for (i = 0; i < MLX5E_LINK_MODES_NUMBER; ++i) {
+		if (eth_proto_cap & MLX5E_PROT_MASK(i))
+			advertising_modes |= deprecated_ptys2legacy_ethtool_table[i].advertised;
+	}
+	return advertising_modes;
+}
+
+static u32 deprecated_ptys2ethtool_supported_port(u32 eth_proto_cap)
+{
+	/*
+	TODO:
+	MLX5E_40GBASE_LR4	 = 16,
+	MLX5E_10GBASE_ER	 = 14,
+	MLX5E_10GBASE_CX4	 = 2,
+	*/
+
+	if (eth_proto_cap & (MLX5E_PROT_MASK(MLX5E_10GBASE_CR)
+			   | MLX5E_PROT_MASK(MLX5E_10GBASE_SR)
+			   | MLX5E_PROT_MASK(MLX5E_40GBASE_CR4)
+			   | MLX5E_PROT_MASK(MLX5E_40GBASE_SR4)
+			   | MLX5E_PROT_MASK(MLX5E_100GBASE_SR4)
+			   | MLX5E_PROT_MASK(MLX5E_1000BASE_CX_SGMII))) {
+		return SUPPORTED_FIBRE;
+	}
+
+	if (eth_proto_cap & (MLX5E_PROT_MASK(MLX5E_100GBASE_KR4)
+			   | MLX5E_PROT_MASK(MLX5E_40GBASE_KR4)
+			   | MLX5E_PROT_MASK(MLX5E_10GBASE_KR)
+			   | MLX5E_PROT_MASK(MLX5E_10GBASE_KX4)
+			   | MLX5E_PROT_MASK(MLX5E_1000BASE_KX))) {
+		return SUPPORTED_Backplane;
+	}
+	return 0;
+}
+
+static void deprecated_get_speed_duplex(struct net_device *netdev,
+					struct mlx5_core_dev *mdev,
+					u32 eth_proto_oper,
+					struct ethtool_cmd *cmd)
+{
+	struct deprecated_ptys2ethtool_config *table;
+	u32 max_size;
+	bool ext;
+	int i;
+	u32 speed = SPEED_UNKNOWN;
+	u8 duplex = DUPLEX_UNKNOWN;
+
+	if (!netif_carrier_ok(netdev))
+		goto out;
+
+	ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+	deprecated_ethtool_get_speed_arr(ext, &max_size, &table);
+	for (i = 0; i < max_size; ++i) {
+		if (eth_proto_oper & MLX5E_PROT_MASK(i)) {
+			speed = table[i].speed;
+			duplex = DUPLEX_FULL;
+			break;
+		}
+	}
+out:
+	ethtool_cmd_speed_set(cmd, speed);
+	cmd->duplex = duplex;
+}
+
+static void deprecated_get_supported(u32 eth_proto_cap, u32 *supported)
+{
+	*supported |= deprecated_ptys2ethtool_supported_port(eth_proto_cap);
+	*supported |= deprecated_ptys2ethtool_supported_link(eth_proto_cap);
+	*supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
+}
+
+static void deprecated_get_advertising(u32 eth_proto_cap, u8 tx_pause,
+				       u8 rx_pause, u32 *advertising)
+{
+	*advertising |= deprecated_ptys2ethtool_adver_link(eth_proto_cap);
+	*advertising |= tx_pause ? ADVERTISED_Pause : 0;
+	*advertising |= (tx_pause ^ rx_pause) ? ADVERTISED_Asym_Pause : 0;
+}
+
+static void deprecated_get_lp_advertising(u32 eth_proto_lp, u32 *lp_advertising)
+{
+
+	*lp_advertising = deprecated_ptys2ethtool_adver_link(eth_proto_lp);
+}
+
+static u32 deprecated_mlx5e_ethtool2ptys_speed_link(bool ext, u32 speed)
+
+{
+	struct deprecated_ptys2ethtool_config *table;
+	u32 i, speed_links = 0;
+	u32 max_size;
+
+	deprecated_ethtool_get_speed_arr(ext, &max_size, &table);
+	for (i = 0; i < max_size; ++i) {
+		if (table[i].speed == speed)
+			speed_links |= MLX5E_PROT_MASK(i);
+	}
+
+	return speed_links;
+}
+
+static int deprecated_ptys2connector_type[MLX5E_CONNECTOR_TYPE_NUMBER] = {
+		[MLX5E_PORT_UNKNOWN]            = PORT_OTHER,
+		[MLX5E_PORT_NONE]               = PORT_NONE,
+		[MLX5E_PORT_TP]                 = PORT_TP,
+		[MLX5E_PORT_AUI]                = PORT_AUI,
+		[MLX5E_PORT_BNC]                = PORT_BNC,
+		[MLX5E_PORT_MII]                = PORT_MII,
+		[MLX5E_PORT_FIBRE]              = PORT_FIBRE,
+		[MLX5E_PORT_DA]                 = PORT_DA,
+		[MLX5E_PORT_OTHER]              = PORT_OTHER,
+};
+
+static u8 deprecated_get_connector_port(u32 eth_proto, u8 connector_type)
+{
+	if (connector_type && connector_type < MLX5E_CONNECTOR_TYPE_NUMBER)
+		return deprecated_ptys2connector_type[connector_type];
+
+	if (eth_proto & (MLX5E_PROT_MASK(MLX5E_10GBASE_SR)
+			 | MLX5E_PROT_MASK(MLX5E_40GBASE_SR4)
+			 | MLX5E_PROT_MASK(MLX5E_100GBASE_SR4)
+			 | MLX5E_PROT_MASK(MLX5E_1000BASE_CX_SGMII))) {
+			return PORT_FIBRE;
+	}
+	if (eth_proto & (MLX5E_PROT_MASK(MLX5E_40GBASE_CR4)
+			 | MLX5E_PROT_MASK(MLX5E_10GBASE_CR)
+			 | MLX5E_PROT_MASK(MLX5E_100GBASE_CR4))) {
+			return PORT_DA;
+	}
+	if (eth_proto & (MLX5E_PROT_MASK(MLX5E_10GBASE_KX4)
+			 | MLX5E_PROT_MASK(MLX5E_10GBASE_KR)
+			 | MLX5E_PROT_MASK(MLX5E_40GBASE_KR4)
+			 | MLX5E_PROT_MASK(MLX5E_100GBASE_KR4))) {
+			return PORT_NONE;
+	}
+
+	return PORT_OTHER;
+}
+
+int mlx5e_get_settings(struct net_device *netdev,
+		       struct ethtool_cmd *cmd)
+{
+	struct mlx5e_priv *priv    = netdev_priv(netdev);
+	struct mlx5_core_dev *mdev = priv->mdev;
+	u32 out[MLX5_ST_SZ_DW(ptys_reg)] = {0};
+	u32 eth_proto_cap;
+	u32 eth_proto_admin;
+	u32 eth_proto_lp;
+	u32 eth_proto_oper;
+	u8 an_disable_admin;
+	u8 connector_type;
+	u8 an_status;
+	bool ext;
+	int err;
+
+	err = mlx5_query_port_ptys(mdev, out, sizeof(out), MLX5_PTYS_EN, 1);
+	if (err) {
+		netdev_err(netdev, "%s: query port ptys failed: %d\n",
+			   __func__, err);
+		goto err_query_ptys;
+	}
+	ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+	eth_proto_oper   = MLX5_GET_ETH_PROTO(ptys_reg, out, ext,
+					      eth_proto_oper);
+	eth_proto_cap    = MLX5_GET(ptys_reg, out, eth_proto_capability);
+	eth_proto_admin  = MLX5_GET(ptys_reg, out, eth_proto_admin);
+	eth_proto_lp     = MLX5_GET(ptys_reg, out, eth_proto_lp_advertise);
+	an_disable_admin = MLX5_GET(ptys_reg, out, an_disable_admin);
+	an_status        = MLX5_GET(ptys_reg, out, an_status);
+	connector_type   = MLX5_GET(ptys_reg, out, connector_type);
+
+	cmd->supported   = 0;
+	cmd->advertising = 0;
+
+	deprecated_get_supported(eth_proto_cap, &cmd->supported);
+	deprecated_get_advertising(eth_proto_admin, 0, 0, &cmd->advertising);
+	deprecated_get_speed_duplex(netdev, mdev, eth_proto_oper, cmd);
+
+	eth_proto_oper = eth_proto_oper ? eth_proto_oper : eth_proto_cap;
+
+	cmd->port = deprecated_get_connector_port(eth_proto_oper, connector_type);
+	deprecated_get_lp_advertising(eth_proto_lp, &cmd->lp_advertising);
+
+	cmd->lp_advertising |= an_status == MLX5_AN_COMPLETE ?
+			       ADVERTISED_Autoneg : 0;
+
+	cmd->transceiver = XCVR_INTERNAL;
+	cmd->autoneg = an_disable_admin ? AUTONEG_DISABLE : AUTONEG_ENABLE;
+	cmd->supported   |= SUPPORTED_Autoneg;
+	cmd->advertising |= !an_disable_admin ? ADVERTISED_Autoneg : 0;
+
+err_query_ptys:
+	return err;
+}
+
+static u32 deprecated_mlx5e_ethtool2ptys_adver_link(u32 link_modes)
+{
+	u32 i, ptys_modes = 0;
+
+	for (i = 0; i < MLX5E_LINK_MODES_NUMBER; ++i) {
+		if (deprecated_ptys2legacy_ethtool_table[i].advertised & link_modes)
+			ptys_modes |= MLX5E_PROT_MASK(i);
+	}
+
+	return ptys_modes;
+}
+
+int mlx5e_set_settings(struct net_device *netdev,
+		       struct ethtool_cmd *cmd)
+{
+	struct mlx5e_priv *priv    = netdev_priv(netdev);
+	struct mlx5_core_dev *mdev = priv->mdev;
+	struct mlx5e_port_eth_proto eproto;
+	bool an_changes = false;
+	u8 an_disable_admin;
+	u8 an_disable_cap;
+	bool an_disable;
+	u32 link_modes;
+	u8 an_status;
+	u32 speed;
+	bool ext;
+	int err;
+
+	ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+
+	speed = ethtool_cmd_speed(cmd);
+
+	link_modes = cmd->autoneg == AUTONEG_ENABLE ?
+		deprecated_mlx5e_ethtool2ptys_adver_link(cmd->advertising) :
+		deprecated_mlx5e_ethtool2ptys_speed_link(ext, speed);
+
+	err = mlx5_port_query_eth_proto(mdev, 1, ext, &eproto);
+	if (err) {
+		netdev_err(netdev, "%s: query port eth proto failed: %d\n",
+			   __func__, err);
+		goto out;
+	}
+
+	/* Overwrite advertise bit for old kernel. When autoneg is enabled,
+	 * driver will advertise all supported speed(eth_proto_cap) and bypass
+	 * advertised speed settings from user. This is because only new
+	 * ethtool(after v4.6) supports advertising speeds like 100G, 25G, etc.
+	 */
+	if (cmd->autoneg == AUTONEG_ENABLE)
+		link_modes = eproto.cap;
+	link_modes = link_modes & eproto.cap;;
+	if (!link_modes) {
+		netdev_err(netdev, "%s: Not supported link mode(s) requested",
+			   __func__);
+		err = -EINVAL;
+		goto out;
+	}
+
+	mlx5_port_query_eth_autoneg(mdev, &an_status, &an_disable_cap,
+				    &an_disable_admin);
+
+	an_disable = cmd->autoneg == AUTONEG_DISABLE;
+	an_changes = ((!an_disable && an_disable_admin) ||
+		      (an_disable && !an_disable_admin));
+
+	if (!an_changes && link_modes == eproto.admin)
+		goto out;
+
+	mlx5_port_set_eth_ptys(mdev, an_disable, link_modes, ext);
+	mlx5_toggle_port_link(mdev);
+
+out:
+	return err;
+}
+#endif
+#ifndef HAVE_GET_SET_LINK_KSETTINGS
+int mlx5e_get_max_linkspeed(struct mlx5_core_dev *mdev, u32 *speed)
+{
+	struct deprecated_ptys2ethtool_config *table;
+	struct mlx5e_port_eth_proto eproto;
+	u32 max_speed = 0;
+	u32 max_size;
+	bool ext;
+	int err;
+	int i;
+
+	ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+	deprecated_ethtool_get_speed_arr(ext, &max_size, &table);
+	err = mlx5_port_query_eth_proto(mdev, 1, ext, &eproto);
+	if (err)
+		return err;
+
+	for (i = 0; i < max_size; ++i)
+		if (eproto.cap & MLX5E_PROT_MASK(i))
+			max_speed = max(max_speed, table[i].speed);
+
+	*speed = max_speed;
+	return 0;
+}
+#endif
 
 typedef int (*mlx5e_pflag_handler)(struct net_device *netdev, bool enable);
 
@@ -224,8 +729,10 @@ int mlx5e_ethtool_get_sset_count(struct
 		for (i = 0; i < mlx5e_num_stats_grps; i++)
 			num_stats += mlx5e_stats_grps[i].get_num_stats(priv);
 		return num_stats;
+#ifdef HAVE_GET_SET_PRIV_FLAGS
 	case ETH_SS_PRIV_FLAGS:
 		return MLX5E_NUM_PFLAGS;
+#endif
 	case ETH_SS_TEST:
 		return mlx5e_self_test_num(priv);
 	/* fallthrough */
@@ -254,12 +761,13 @@ void mlx5e_ethtool_get_strings(struct ml
 	int i;
 
 	switch (stringset) {
+#ifdef HAVE_GET_SET_PRIV_FLAGS
 	case ETH_SS_PRIV_FLAGS:
 		for (i = 0; i < MLX5E_NUM_PFLAGS; i++)
 			strcpy(data + i * ETH_GSTRING_LEN,
 			       mlx5e_priv_flags[i].name);
 		break;
-
+#endif
 	case ETH_SS_TEST:
 		for (i = 0; i < mlx5e_self_test_num(priv); i++)
 			strcpy(data + i * ETH_GSTRING_LEN,
@@ -343,6 +851,12 @@ int mlx5e_ethtool_set_ringparam(struct m
 			    1 << MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE);
 		return -EINVAL;
 	}
+	if (param->rx_pending > (1 << MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE)) {
+		netdev_info(priv->netdev, "%s: rx_pending (%d) > max (%d)\n",
+			    __func__, param->rx_pending,
+			    1 << MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE);
+		return -EINVAL;
+	}
 
 	if (param->tx_pending < (1 << MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE)) {
 		netdev_info(priv->netdev, "%s: tx_pending (%d) < min (%d)\n",
@@ -350,6 +864,12 @@ int mlx5e_ethtool_set_ringparam(struct m
 			    1 << MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE);
 		return -EINVAL;
 	}
+	if (param->tx_pending > (1 << MLX5E_PARAMS_MAXIMUM_LOG_SQ_SIZE)) {
+		netdev_info(priv->netdev, "%s: tx_pending (%d) > max (%d)\n",
+			    __func__, param->tx_pending,
+			    1 << MLX5E_PARAMS_MAXIMUM_LOG_SQ_SIZE);
+		return -EINVAL;
+	}
 
 	log_rq_size = order_base_2(param->rx_pending);
 	log_sq_size = order_base_2(param->tx_pending);
@@ -385,6 +905,7 @@ static int mlx5e_set_ringparam(struct ne
 	return mlx5e_ethtool_set_ringparam(priv, param);
 }
 
+#if defined(HAVE_GET_SET_CHANNELS) || defined(HAVE_GET_SET_CHANNELS_EXT)
 void mlx5e_ethtool_get_channels(struct mlx5e_priv *priv,
 				struct ethtool_channels *ch)
 {
@@ -455,7 +976,9 @@ int mlx5e_ethtool_set_channels(struct ml
 #endif
 	if (!test_bit(MLX5E_STATE_OPENED, &priv->state)) {
 		priv->channels.params = new_channels.params;
+#ifdef HAVE_NETIF_IS_RXFH_CONFIGURED
 		if (!netif_is_rxfh_configured(priv->netdev))
+#endif
 			mlx5e_build_default_indir_rqt(priv->rss_params.indirection_rqt,
 						      MLX5E_INDIR_RQT_SIZE, count);
 		goto out;
@@ -490,6 +1013,8 @@ static int mlx5e_set_channels(struct net
 	return mlx5e_ethtool_set_channels(priv, ch);
 }
 
+#endif
+
 int mlx5e_ethtool_get_coalesce(struct mlx5e_priv *priv,
 			       struct ethtool_coalesce *coal)
 {
@@ -614,6 +1139,7 @@ static int mlx5e_set_coalesce(struct net
 	return mlx5e_ethtool_set_coalesce(priv, coal);
 }
 
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 static void ptys2ethtool_supported_link(struct mlx5_core_dev *mdev,
 					unsigned long *supported_modes,
 					u32 eth_proto_cap)
@@ -647,7 +1173,8 @@ static void ptys2ethtool_adver_link(unsi
 			  table[proto].advertised,
 			  __ETHTOOL_LINK_MODE_MASK_NBITS);
 }
-
+#endif
+#ifdef HAVE_GET_SET_FECPARAM
 static const u32 pplm_fec_2_ethtool[] = {
 	[MLX5E_FEC_NOFEC] = ETHTOOL_FEC_OFF,
 	[MLX5E_FEC_FIRECODE] = ETHTOOL_FEC_BASER,
@@ -711,7 +1238,9 @@ static int get_fec_supported_advertised(
 
 	return 0;
 }
+#endif
 
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 static void ptys2ethtool_supported_advertised_port(struct ethtool_link_ksettings *link_ksettings,
 						   u32 eth_proto_cap,
 						   u8 connector_type, bool ext)
@@ -965,13 +1494,14 @@ int mlx5e_ethtool_get_link_ksettings(str
 	ethtool_link_ksettings_add_link_mode(link_ksettings, supported,
 					     Autoneg);
 
+#ifdef HAVE_GET_SET_FECPARAM
 	err = get_fec_supported_advertised(mdev, link_ksettings);
 	if (err) {
 		netdev_dbg(priv->netdev, "%s: FEC caps query failed: %d\n",
 			   __func__, err);
 		err = 0; /* don't fail caps query because of FEC error */
 	}
-
+#endif
 	if (!an_disable_admin)
 		ethtool_link_ksettings_add_link_mode(link_ksettings,
 						     advertising, Autoneg);
@@ -1006,6 +1536,7 @@ static u32 mlx5e_ethtool2ptys_adver_link
 
 static u32 mlx5e_ethtool2ptys_ext_adver_link(const unsigned long *link_modes)
 {
+#ifdef HAVE_ETHTOOL_50G_PER_LANE_LINK_MODES
 	u32 i, ptys_modes = 0;
 	unsigned long modes[2];
 
@@ -1021,6 +1552,9 @@ static u32 mlx5e_ethtool2ptys_ext_adver_
 			ptys_modes |= MLX5E_PROT_MASK(i);
 	}
 	return ptys_modes;
+#else
+	return 0;
+#endif
 }
 
 static bool ext_link_mode_requested(const unsigned long *adver)
@@ -1083,6 +1617,14 @@ int mlx5e_ethtool_set_link_ksettings(str
 	}
 	link_modes = autoneg == AUTONEG_ENABLE ? ethtool2ptys_adver_func(adver) :
 		mlx5e_port_speed2linkmodes(mdev, speed, !ext);
+#ifndef HAVE_ETHTOOL_25G_50G_100G_SPEEDS
+	if (link_ksettings->base.autoneg == AUTONEG_ENABLE)
+		link_modes = eproto.cap;;
+#endif
+#ifndef HAVE_ETHTOOL_50G_PER_LANE_LINK_MODES
+	if (link_ksettings->base.autoneg == AUTONEG_ENABLE && ext_supported)
+		link_modes = eproto.cap;;
+#endif
 
 	link_modes = link_modes & eproto.cap;
 	if (!link_modes) {
@@ -1117,6 +1659,9 @@ int mlx5e_set_link_ksettings(struct net_
 	return mlx5e_ethtool_set_link_ksettings(priv, link_ksettings);
 }
 
+#endif /* HAVE_GET_SET_LINK_KSETTINGS */
+
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 u32 mlx5e_ethtool_get_rxfh_key_size(struct mlx5e_priv *priv)
 {
 	return sizeof(priv->rss_params.toeplitz_hash_key);
@@ -1128,7 +1673,9 @@ static u32 mlx5e_get_rxfh_key_size(struc
 
 	return mlx5e_ethtool_get_rxfh_key_size(priv);
 }
+#endif
 
+#if defined(HAVE_RXFH_INDIR_SIZE) || defined(HAVE_RXFH_INDIR_SIZE_EXT)
 u32 mlx5e_ethtool_get_rxfh_indir_size(struct mlx5e_priv *priv)
 {
 	return MLX5E_INDIR_RQT_SIZE;
@@ -1140,9 +1687,20 @@ static u32 mlx5e_get_rxfh_indir_size(str
 
 	return mlx5e_ethtool_get_rxfh_indir_size(priv);
 }
+#endif
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
 int mlx5e_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key,
 		   u8 *hfunc)
+#else
+int mlx5e_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key)
+#endif
+#elif defined(HAVE_GET_SET_RXFH_INDIR) || defined (HAVE_GET_SET_RXFH_INDIR_EXT)
+int mlx5e_get_rxfh_indir(struct net_device *netdev, u32 *indir)
+#endif
+#if defined(HAVE_GET_SET_RXFH) || defined(HAVE_GET_SET_RXFH_INDIR) || \
+				  defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
 	struct mlx5e_rss_params *rss = &priv->rss_params;
@@ -1151,35 +1709,54 @@ int mlx5e_get_rxfh(struct net_device *ne
 		memcpy(indir, rss->indirection_rqt,
 		       sizeof(rss->indirection_rqt));
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 	if (key)
 		memcpy(key, rss->toeplitz_hash_key,
 		       sizeof(rss->toeplitz_hash_key));
 
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
 	if (hfunc)
 		*hfunc = rss->hfunc;
+#endif
+#endif
 
 	return 0;
 }
+#endif
 
 void mlx5e_sysfs_modify_tirs_hash(struct mlx5e_priv *priv, void *in, int inlen)
 {
 	mlx5e_modify_tirs_hash(priv, in, inlen);
 }
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 int mlx5e_set_rxfh(struct net_device *dev, const u32 *indir,
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
 		   const u8 *key, const u8 hfunc)
+#else
+		   const u8 *key)
+#endif
+#elif defined(HAVE_GET_SET_RXFH_INDIR) || defined (HAVE_GET_SET_RXFH_INDIR_EXT)
+int mlx5e_set_rxfh_indir(struct net_device *dev, const u32 *indir)
+#endif
+#if defined(HAVE_GET_SET_RXFH) || defined(HAVE_GET_SET_RXFH_INDIR) || \
+                                  defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
 	struct mlx5e_rss_params *rss = &priv->rss_params;
 	int inlen = MLX5_ST_SZ_BYTES(modify_tir_in);
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT) && defined(HAVE_ETH_SS_RSS_HASH_FUNCS)
 	bool refresh_tirs = false;
+#endif
 	bool refresh_rqt = false;
 	void *in;
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT) && defined(HAVE_ETH_SS_RSS_HASH_FUNCS)
 	if ((hfunc != ETH_RSS_HASH_NO_CHANGE) &&
 	    (hfunc != ETH_RSS_HASH_XOR) &&
 	    (hfunc != ETH_RSS_HASH_TOP))
 		return -EINVAL;
+#endif
 
 	in = kvzalloc(inlen, GFP_KERNEL);
 	if (!in)
@@ -1187,11 +1764,13 @@ int mlx5e_set_rxfh(struct net_device *de
 
 	mutex_lock(&priv->state_lock);
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT) && defined(HAVE_ETH_SS_RSS_HASH_FUNCS)
 	if (hfunc != ETH_RSS_HASH_NO_CHANGE && hfunc != rss->hfunc) {
 		rss->hfunc = hfunc;
 		refresh_rqt = true;
 		refresh_tirs = true;
 	}
+#endif
 
 	if (indir) {
 		memcpy(rss->indirection_rqt, indir,
@@ -1199,11 +1778,15 @@ int mlx5e_set_rxfh(struct net_device *de
 		refresh_rqt = true;
 	}
 
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 	if (key) {
 		memcpy(rss->toeplitz_hash_key, key,
 		       sizeof(rss->toeplitz_hash_key));
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
 		refresh_tirs = refresh_tirs || rss->hfunc == ETH_RSS_HASH_TOP;
+#endif
 	}
+#endif
 
 	if (refresh_rqt && test_bit(MLX5E_STATE_OPENED, &priv->state)) {
 		struct mlx5e_redirect_rqt_param rrp = {
@@ -1219,9 +1802,10 @@ int mlx5e_set_rxfh(struct net_device *de
 
 		mlx5e_redirect_rqt(priv, rqtn, MLX5E_INDIR_RQT_SIZE, rrp);
 	}
-
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT) && defined(HAVE_ETH_SS_RSS_HASH_FUNCS)
 	if (refresh_tirs)
 		mlx5e_modify_tirs_hash(priv, in, inlen);
+#endif
 
 	mutex_unlock(&priv->state_lock);
 
@@ -1229,6 +1813,7 @@ int mlx5e_set_rxfh(struct net_device *de
 
 	return 0;
 }
+#endif
 
 #define MLX5E_PFC_PREVEN_AUTO_TOUT_MSEC		100
 #define MLX5E_PFC_PREVEN_TOUT_MAX_MSEC		8000
@@ -1238,6 +1823,7 @@ int mlx5e_set_rxfh(struct net_device *de
 	max_t(u16, MLX5E_PFC_PREVEN_TOUT_MIN_MSEC, \
 	      (critical_tout * MLX5E_PFC_PREVEN_MINOR_PRECENT) / 100)
 
+#ifdef HAVE_GET_SET_TUNABLE
 static int mlx5e_get_pfc_prevention_tout(struct net_device *netdev,
 					 u16 *pfc_prevention_tout)
 {
@@ -1280,7 +1866,9 @@ static int mlx5e_set_pfc_prevention_tout
 	return mlx5_set_port_stall_watermark(mdev, critical_tout,
 					     minor);
 }
+#endif
 
+#ifdef HAVE_GET_SET_TUNABLE
 static int mlx5e_get_tunable(struct net_device *dev,
 			     const struct ethtool_tunable *tuna,
 			     void *data)
@@ -1320,6 +1908,7 @@ static int mlx5e_set_tunable(struct net_
 	mutex_unlock(&priv->state_lock);
 	return err;
 }
+#endif
 
 void mlx5e_ethtool_get_pauseparam(struct mlx5e_priv *priv,
 				  struct ethtool_pauseparam *pauseparam)
@@ -1374,6 +1963,7 @@ static int mlx5e_set_pauseparam(struct n
 	return mlx5e_ethtool_set_pauseparam(priv, pauseparam);
 }
 
+#if defined(HAVE_GET_TS_INFO) || defined(HAVE_GET_TS_INFO_EXT)
 int mlx5e_ethtool_get_ts_info(struct mlx5e_priv *priv,
 			      struct ethtool_ts_info *info)
 {
@@ -1405,7 +1995,7 @@ static int mlx5e_get_ts_info(struct net_
 
 	return mlx5e_ethtool_get_ts_info(priv, info);
 }
-
+#endif
 static __u32 mlx5e_get_wol_supported(struct mlx5_core_dev *mdev)
 {
 	__u32 ret = 0;
@@ -1528,7 +2118,7 @@ static int mlx5e_set_wol(struct net_devi
 
 	return mlx5_set_port_wol(mdev, mlx5_wol_mode);
 }
-
+#ifdef HAVE_GET_SET_FECPARAM
 static int mlx5e_get_fecparam(struct net_device *netdev,
 			      struct ethtool_fecparam *fecparam)
 {
@@ -1580,7 +2170,8 @@ static int mlx5e_set_fecparam(struct net
 
 	return 0;
 }
-
+#endif
+#ifdef HAVE_GET_SET_MSGLEVEL
 static u32 mlx5e_get_msglevel(struct net_device *dev)
 {
 	return ((struct mlx5e_priv *)netdev_priv(dev))->msglevel;
@@ -1590,7 +2181,9 @@ static void mlx5e_set_msglevel(struct ne
 {
 	((struct mlx5e_priv *)netdev_priv(dev))->msglevel = val;
 }
+#endif
 
+#if defined(HAVE_SET_PHYS_ID) || defined(HAVE_SET_PHYS_ID_EXT)
 static int mlx5e_set_phys_id(struct net_device *dev,
 			     enum ethtool_phys_id_state state)
 {
@@ -1614,7 +2207,9 @@ static int mlx5e_set_phys_id(struct net_
 
 	return mlx5_set_port_beacon(mdev, beacon_duration);
 }
+#endif
 
+#if defined(HAVE_GET_MODULE_EEPROM) || defined(HAVE_GET_MODULE_EEPROM_EXT)
 static int mlx5e_get_module_info(struct net_device *netdev,
 				 struct ethtool_modinfo *modinfo)
 {
@@ -1696,6 +2291,7 @@ static int mlx5e_get_module_eeprom(struc
 
 	return 0;
 }
+#endif
 
 int mlx5e_ethtool_flash_device(struct mlx5e_priv *priv,
 			       struct ethtool_flash *flash)
@@ -1715,7 +2311,11 @@ int mlx5e_ethtool_flash_device(struct ml
 	dev_hold(dev);
 	rtnl_unlock();
 
-	err = mlx5_firmware_flash(mdev, fw, NULL);
+	err = mlx5_firmware_flash(mdev, fw
+#ifdef HAVE_NETLINK_EXT_ACK
+				  , NULL
+#endif
+				  );
 	release_firmware(fw);
 
 	rtnl_lock();
@@ -1912,15 +2512,51 @@ static int set_pflag_rx_striding_rq(stru
 	return mlx5e_safe_switch_channels(priv, &new_channels, NULL);
 }
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+static int set_pflag_hwlro(struct net_device *netdev, bool enable)
+{
+	struct mlx5e_priv *priv = netdev_priv(netdev);
+	struct mlx5e_channels new_channels = {};
+	int err = 0;
+	bool reset;
+
+
+	if (priv->channels.params.rq_wq_type !=
+			MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ) {
+		netdev_warn(netdev, "Can't toggle HW LRO with legacy RQ\n");
+		return -EINVAL;
+	}
+
+	new_channels.params = priv->channels.params;
+	MLX5E_SET_PFLAG(&new_channels.params, MLX5E_PFLAG_HWLRO, enable);
+	reset = test_bit(MLX5E_STATE_OPENED, &priv->state) &&
+		new_channels.params.lro_en;
+
+	if (!reset) {
+		priv->channels.params = new_channels.params;
+		err = mlx5e_modify_tirs_lro(priv);
+		goto out;
+	}
+
+	err = mlx5e_safe_switch_channels(priv, &new_channels,
+			mlx5e_modify_tirs_lro);
+out:
+	return err;
+}
+#endif
+
 static int set_pflag_rx_no_csum_complete(struct net_device *netdev, bool enable)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
 	struct mlx5e_channels *channels = &priv->channels;
 	struct mlx5e_channel *c;
 	int i;
-
+#ifdef HAVE_XDP_BUFF
 	if (!test_bit(MLX5E_STATE_OPENED, &priv->state) ||
 	    priv->channels.params.xdp_prog)
+#else
+	if (!test_bit(MLX5E_STATE_OPENED, &priv->state))
+#endif
 		return 0;
 
 	for (i = 0; i < channels->num; i++) {
@@ -1941,6 +2577,7 @@ static int set_pflag_per_channel_stats(s
 	return 0;
 }
 
+#ifdef HAVE_XDP_BUFF
 static int set_pflag_xdp_tx_mpwqe(struct net_device *netdev, bool enable)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
@@ -1963,6 +2600,7 @@ static int set_pflag_xdp_tx_mpwqe(struct
 	err = mlx5e_safe_switch_channels(priv, &new_channels, NULL);
 	return err;
 }
+#endif
 
 static int set_pflag_dropless_rq(struct net_device *netdev,
 				 bool new_val)
@@ -1997,6 +2635,7 @@ static int set_pflag_dropless_rq(struct
 	return err;
 }
 
+#ifdef HAVE_XDP_BUFF
 static int set_pflag_tx_xdp_hw_checksum(struct net_device *netdev, bool new_val)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
@@ -2023,6 +2662,7 @@ static int set_pflag_tx_xdp_hw_checksum(
 
 	return err;
 }
+#endif
 
 static const struct pflag_desc mlx5e_priv_flags[MLX5E_NUM_PFLAGS] = {
 	{ "rx_cqe_moder",        set_pflag_rx_cqe_based_moder },
@@ -2031,11 +2671,18 @@ static const struct pflag_desc mlx5e_pri
 	{ "tx_cqe_compress",     set_pflag_tx_cqe_compress },
 	{ "rx_striding_rq",      set_pflag_rx_striding_rq },
 	{ "rx_no_csum_complete", set_pflag_rx_no_csum_complete },
+#ifdef HAVE_XDP_BUFF
 	{ "xdp_tx_mpwqe",        set_pflag_xdp_tx_mpwqe },
+#endif
 	{ "sniffer",        	 set_pflag_sniffer },
 	{ "dropless_rq",	 set_pflag_dropless_rq},
 	{ "per_channel_stats",	 set_pflag_per_channel_stats},
+#ifdef HAVE_XDP_BUFF
         { "tx_xdp_hw_checksum",  set_pflag_tx_xdp_hw_checksum},
+#endif
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	{ "hw_lro",              set_pflag_hwlro },
+#endif
 };
 
 int mlx5e_priv_flags_num(void)
@@ -2071,6 +2718,7 @@ static int mlx5e_handle_pflag(struct net
 	return 0;
 }
 
+#ifdef HAVE_GET_SET_PRIV_FLAGS
 int mlx5e_set_priv_flags(struct net_device *netdev, u32 pflags)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
@@ -2088,7 +2736,11 @@ int mlx5e_set_priv_flags(struct net_devi
 	mutex_unlock(&priv->state_lock);
 
 	/* Need to fix some features.. */
+#if defined (HAVE_NETDEV_UPDATE_FEATURES)
 	netdev_update_features(netdev);
+#else
+	/* FIXME */
+#endif
 
 	return err;
 }
@@ -2099,6 +2751,86 @@ u32 mlx5e_get_priv_flags(struct net_devi
 
 	return priv->channels.params.pflags;
 }
+#endif
+
+#ifdef LEGACY_ETHTOOL_OPS
+#ifdef HAVE_GET_SET_FLAGS
+static int mlx5e_set_flags(struct net_device *dev, u32 data)
+{
+	struct mlx5e_priv *priv = netdev_priv(dev);
+	u32 changes = data ^ dev->features;
+	int ret = 0;
+
+	mutex_lock(&priv->state_lock);
+
+	if (changes & ETH_FLAG_LRO) {
+#if (!defined(HAVE_NDO_SET_FEATURES) && !defined(HAVE_NET_DEVICE_OPS_EXT))
+		ret = mlx5e_update_lro(dev, !priv->channels.params.lro_en);
+		if (ret)
+			goto out;
+#else
+		priv->channels.params.lro_en = !priv->channels.params.lro_en;
+#endif
+		dev->features ^= NETIF_F_LRO;
+	}
+
+	if (changes & ETH_FLAG_RXVLAN) {
+		if (test_bit(MLX5E_STATE_OPENED, &priv->state))
+			mlx5e_modify_channels_vsd(&priv->channels, data & ETH_FLAG_RXVLAN ?
+						  0 : 1);
+		dev->features ^= NETIF_F_HW_VLAN_CTAG_RX;
+	}
+
+	if (changes & ETH_FLAG_TXVLAN)
+		dev->features ^= NETIF_F_HW_VLAN_CTAG_TX;
+
+out:
+	mutex_unlock(&priv->state_lock);
+	return ret;
+}
+
+static u32 mlx5e_get_flags(struct net_device *dev)
+{
+	return ethtool_op_get_flags(dev) |
+		(dev->features & NETIF_F_HW_VLAN_CTAG_RX) |
+		(dev->features & NETIF_F_HW_VLAN_CTAG_TX);
+}
+#endif
+
+#ifdef HAVE_GET_SET_TSO
+static u32 mlx5e_get_tso(struct net_device *dev)
+{
+       return (dev->features & NETIF_F_TSO) != 0;
+}
+
+static int mlx5e_set_tso(struct net_device *dev, u32 data)
+{
+       if (data)
+               dev->features |= (NETIF_F_TSO | NETIF_F_TSO6);
+       else
+               dev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6);
+       return 0;
+}
+#endif
+
+
+#ifdef HAVE_GET_SET_RX_CSUM
+static u32 mlx5e_get_rx_csum(struct net_device *dev)
+{
+       return dev->features & NETIF_F_RXCSUM;
+}
+
+static int mlx5e_set_rx_csum(struct net_device *dev, u32 data)
+{
+       if (!data) {
+               dev->features &= ~NETIF_F_RXCSUM;
+               return 0;
+       }
+       dev->features |= NETIF_F_RXCSUM;
+       return 0;
+}
+#endif
+#endif
 
 #ifndef CONFIG_MLX5_EN_RXNFC
 /* When CONFIG_MLX5_EN_RXNFC=n we only support ETHTOOL_GRXRINGS
@@ -2124,40 +2856,123 @@ const struct ethtool_ops mlx5e_ethtool_o
 	.get_ethtool_stats = mlx5e_get_ethtool_stats,
 	.get_ringparam     = mlx5e_get_ringparam,
 	.set_ringparam     = mlx5e_set_ringparam,
+#ifdef HAVE_GET_SET_CHANNELS
 	.get_channels      = mlx5e_get_channels,
 	.set_channels      = mlx5e_set_channels,
+#endif
 	.get_coalesce      = mlx5e_get_coalesce,
 	.set_coalesce      = mlx5e_set_coalesce,
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 	.get_link_ksettings  = mlx5e_get_link_ksettings,
 	.set_link_ksettings  = mlx5e_set_link_ksettings,
+#endif
+#ifdef HAVE_ETHTOOL_GET_SET_SETTINGS
+	.get_settings  = mlx5e_get_settings,
+	.set_settings  = mlx5e_set_settings,
+#endif
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 	.get_rxfh_key_size   = mlx5e_get_rxfh_key_size,
-	.get_rxfh_indir_size = mlx5e_get_rxfh_indir_size,
+#endif
+	.get_coalesce      = mlx5e_get_coalesce,
+#if defined(HAVE_RXFH_INDIR_SIZE) && !defined(HAVE_RXFH_INDIR_SIZE_EXT)
+       .get_rxfh_indir_size = mlx5e_get_rxfh_indir_size,
+#endif
+#if defined(HAVE_GET_SET_RXFH) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
 	.get_rxfh          = mlx5e_get_rxfh,
 	.set_rxfh          = mlx5e_set_rxfh,
+#elif defined(HAVE_GET_SET_RXFH_INDIR) && !defined(HAVE_GET_SET_RXFH_INDIR_EXT)
+	.get_rxfh_indir    = mlx5e_get_rxfh_indir,
+	.set_rxfh_indir    = mlx5e_set_rxfh_indir,
+#endif
 	.get_rxnfc         = mlx5e_get_rxnfc,
 #ifdef CONFIG_MLX5_EN_RXNFC
 	.set_rxnfc         = mlx5e_set_rxnfc,
 #endif
+#ifdef HAVE_GET_SET_TUNABLE
 	.get_tunable       = mlx5e_get_tunable,
 	.set_tunable       = mlx5e_set_tunable,
+#endif
 	.get_pauseparam    = mlx5e_get_pauseparam,
 	.set_pauseparam    = mlx5e_set_pauseparam,
+#if defined(HAVE_GET_TS_INFO) && !defined(HAVE_GET_TS_INFO_EXT)
 	.get_ts_info       = mlx5e_get_ts_info,
+#endif
+#if defined(HAVE_SET_PHYS_ID) && !defined(HAVE_SET_PHYS_ID_EXT)
 	.set_phys_id       = mlx5e_set_phys_id,
+#endif
 	.get_wol	   = mlx5e_get_wol,
 	.set_wol	   = mlx5e_set_wol,
+#ifdef HAVE_GET_MODULE_EEPROM
 	.get_module_info   = mlx5e_get_module_info,
 	.get_module_eeprom = mlx5e_get_module_eeprom,
+#endif
 	.flash_device      = mlx5e_flash_device,
+#ifdef HAVE_GET_SET_PRIV_FLAGS
 	.get_priv_flags    = mlx5e_get_priv_flags,
 	.set_priv_flags    = mlx5e_set_priv_flags,
+#endif
+#ifdef LEGACY_ETHTOOL_OPS
+#if defined(HAVE_GET_SET_FLAGS)
+	.get_flags	   = mlx5e_get_flags,
+	.set_flags	   = mlx5e_set_flags,
+#endif
+#if defined(HAVE_GET_SET_TSO)
+	.get_tso	   = mlx5e_get_tso,
+	.set_tso	   = mlx5e_set_tso,
+#endif
+#if defined(HAVE_GET_SET_SG)
+	.get_sg = ethtool_op_get_sg,
+	.set_sg = ethtool_op_set_sg,
+#endif
+#if defined(HAVE_GET_SET_RX_CSUM)
+	.get_rx_csum = mlx5e_get_rx_csum,
+	.set_rx_csum = mlx5e_set_rx_csum,
+#endif
+#if defined(HAVE_GET_SET_TX_CSUM)
+	.get_tx_csum = ethtool_op_get_tx_csum,
+	.set_tx_csum = ethtool_op_set_tx_ipv6_csum,
+#endif
+#endif
 	.self_test         = mlx5e_self_test,
+#ifdef HAVE_GET_SET_MSGLEVEL
 	.get_msglevel      = mlx5e_get_msglevel,
 	.set_msglevel      = mlx5e_set_msglevel,
+#endif
 	.set_priv_flags    = mlx5e_set_priv_flags,
+#ifdef HAVE_GET_SET_DUMP
 	.get_dump_flag     = mlx5e_get_dump_flag,
 	.get_dump_data     = mlx5e_get_dump_data,
 	.set_dump          = mlx5e_set_dump,
+#endif
+#ifdef HAVE_GET_SET_FECPARAM
 	.get_fecparam      = mlx5e_get_fecparam,
 	.set_fecparam      = mlx5e_set_fecparam,
+#endif
+};
+
+#ifdef HAVE_ETHTOOL_OPS_EXT
+const struct ethtool_ops_ext mlx5e_ethtool_ops_ext = {
+	.size		   = sizeof(struct ethtool_ops_ext),
+#ifdef HAVE_RXFH_INDIR_SIZE_EXT
+	.get_rxfh_indir_size = mlx5e_get_rxfh_indir_size,
+#endif
+#ifdef HAVE_GET_SET_RXFH_INDIR_EXT
+	.get_rxfh_indir = mlx5e_get_rxfh_indir,
+	.set_rxfh_indir = mlx5e_set_rxfh_indir,
+#endif
+#ifdef HAVE_GET_SET_CHANNELS_EXT
+	.get_channels	   = mlx5e_get_channels,
+	.set_channels	   = mlx5e_set_channels,
+#endif
+#ifdef HAVE_GET_TS_INFO_EXT
+	.get_ts_info = mlx5e_get_ts_info,
+#endif
+#ifdef HAVE_GET_MODULE_EEPROM_EXT
+	.get_module_info   = mlx5e_get_module_info,
+	.get_module_eeprom = mlx5e_get_module_eeprom,
+#endif
+#if !defined(HAVE_SET_PHYS_ID) && defined(HAVE_SET_PHYS_ID_EXT)
+	.set_phys_id       = mlx5e_set_phys_id,
+#endif
 };
+#endif /* HAVE_ETHTOOL_OPS_EXT */
