From: Nitzan Carmi <nitzanc@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/nvme/target/core.c

Change-Id: If701240f541a182094f52a8f0719133554c86d00
---
 drivers/nvme/target/core.c | 84 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 84 insertions(+)

--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -85,8 +85,13 @@ inline u16 errno_to_nvme_status(struct n
 static struct nvmet_subsys *nvmet_find_get_subsys(struct nvmet_port *port,
 		const char *subsysnqn);
 
+#ifdef CONFIG_COMPAT_SCATTERLIST_SG_PCOPY_TO_BUFFER
 u16 nvmet_copy_to_sgl(struct nvmet_req *req, off_t off, const void *buf,
 		size_t len)
+#else
+u16 nvmet_copy_to_sgl(struct nvmet_req *req, off_t off, void *buf,
+		size_t len)
+#endif
 {
 	if (sg_pcopy_from_buffer(req->sg, req->sg_cnt, buf, len, off) != len) {
 		req->error_loc = offsetof(struct nvme_common_command, dptr);
@@ -532,7 +537,9 @@ void nvmet_put_namespace(struct nvmet_ns
 static void nvmet_ns_dev_disable(struct nvmet_ns *ns)
 {
 	nvmet_bdev_ns_disable(ns);
+#ifdef HAVE_FS_HAS_KIOCB
 	nvmet_file_ns_disable(ns);
+#endif
 }
 
 static int nvmet_p2pmem_ns_enable(struct nvmet_ns *ns)
@@ -663,8 +670,10 @@ int nvmet_ns_enable(struct nvmet_ns *ns)
 		goto out_unlock;
 
 	ret = nvmet_bdev_ns_enable(ns);
+#ifdef HAVE_FS_HAS_KIOCB
 	if (ret == -ENOTBLK)
 		ret = nvmet_file_ns_enable(ns);
+#endif
 	if (ret)
 		goto out_unlock;
 
@@ -1021,9 +1030,11 @@ static u16 nvmet_parse_io_cmd(struct nvm
 		return ret;
 	}
 
+#ifdef HAVE_FS_HAS_KIOCB
 	if (req->ns->file)
 		return nvmet_file_parse_io_cmd(req);
 	else
+#endif
 		return nvmet_bdev_parse_io_cmd(req);
 }
 
@@ -1112,9 +1123,69 @@ void nvmet_req_execute(struct nvmet_req
 }
 EXPORT_SYMBOL_GPL(nvmet_req_execute);
 
+#ifndef HAVE_SGL_FREE
+static void nvmet_free_sgl(struct scatterlist *sgl, unsigned int nents)
+{
+	struct scatterlist *sg;
+	int count;
+
+	if (!sgl || !nents)
+		return;
+
+	for_each_sg(sgl, sg, nents, count)
+		__free_page(sg_page(sg));
+	kfree(sgl);
+}
+#endif
+
+#ifndef HAVE_SGL_ALLOC
+static int nvmet_alloc_sgl(struct scatterlist **sgl, unsigned int *nents,
+               u32 length)
+{
+	struct scatterlist *sg;
+	struct page *page;
+	unsigned int nent;
+	int i = 0;
+
+	nent = DIV_ROUND_UP(length, PAGE_SIZE);
+	sg = kmalloc_array(nent, sizeof(struct scatterlist), GFP_KERNEL);
+	if (!sg)
+		goto out;
+
+	sg_init_table(sg, nent);
+
+	while (length) {
+		u32 page_len = min_t(u32, length, PAGE_SIZE);
+
+	        page = alloc_page(GFP_KERNEL);
+		if (!page)
+	                goto out_free_pages;
+
+	        sg_set_page(&sg[i], page, page_len, 0);
+		length -= page_len;
+		i++;
+	}
+	*sgl = sg;
+	*nents = nent;
+	return 0;
+
+out_free_pages:
+	while (i > 0) {
+		i--;
+		__free_page(sg_page(&sg[i]));
+	}
+	kfree(sg);
+out:
+	return NVME_SC_INTERNAL;
+}
+#endif
+
 int nvmet_req_alloc_sgl(struct nvmet_req *req)
 {
 	struct pci_dev *p2p_dev = NULL;
+#ifndef HAVE_SGL_ALLOC
+	u16 status;
+#endif
 
 	if (IS_ENABLED(CONFIG_PCI_P2PDMA)) {
 		if (req->sq->ctrl && req->ns)
@@ -1137,9 +1208,15 @@ int nvmet_req_alloc_sgl(struct nvmet_req
 		 */
 	}
 
+#ifdef HAVE_SGL_ALLOC
 	req->sg = sgl_alloc(req->transfer_len, GFP_KERNEL, &req->sg_cnt);
 	if (!req->sg)
 		return -ENOMEM;
+#else
+	status = nvmet_alloc_sgl(&req->sg, &req->sg_cnt, req->transfer_len); //XXX ???
+	if (status)
+		return status;
+#endif
 
 	return 0;
 }
@@ -1150,7 +1227,11 @@ void nvmet_req_free_sgl(struct nvmet_req
 	if (req->p2p_dev)
 		pci_p2pmem_free_sgl(req->p2p_dev, req->sg);
 	else
+#ifdef HAVE_SGL_FREE
 		sgl_free(req->sg);
+#else
+		nvmet_free_sgl(req->sg, req->sg_cnt);
+#endif
 
 	req->sg = NULL;
 	req->sg_cnt = 0;
@@ -1680,3 +1761,6 @@ module_init(nvmet_init);
 module_exit(nvmet_exit);
 
 MODULE_LICENSE("GPL v2");
+#ifdef RETPOLINE_MLNX
+MODULE_INFO(retpoline, "Y");
+#endif
