From: Bodong Wang <bodong@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c

Change-Id: Ifc7cb27a48a57f19f3d9a84401e657350654e8a5
---
 .../ethernet/mellanox/mlx5/core/en/tc_tun.c   | 80 ++++++++++++++++---
 1 file changed, 71 insertions(+), 9 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
@@ -1,8 +1,11 @@
 /* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
 /* Copyright (c) 2018 Mellanox Technologies. */
 
+#ifdef HAVE_TCF_TUNNEL_INFO
+
 #include <net/vxlan.h>
 #include <net/gre.h>
+#include <net/geneve.h>
 #include "en/tc_tun.h"
 #include "en_tc.h"
 
@@ -12,10 +15,18 @@ module_param_string(out_ifname, out_ifna
 
 struct mlx5e_tc_tunnel *mlx5e_get_tc_tun(struct net_device *tunnel_dev)
 {
+#if !defined(HAVE___TC_INDR_BLOCK_CB_REGISTER) && !defined(CONFIG_COMPAT_KERNEL_4_14)
+/* in old kernels with egdev we don't pass the netdev so the filter_dev here
+ * is actually priv->netdev. we only assume and support vxlan */
+	return &vxlan_tunnel;
+#endif
+
 	if (netif_is_vxlan(tunnel_dev))
 		return &vxlan_tunnel;
+#ifdef HAVE_FLOW_DISSECTOR_KEY_ENC_OPTS
 	else if (netif_is_geneve(tunnel_dev))
 		return &geneve_tunnel;
+#endif
 	else if (netif_is_gretap(tunnel_dev) ||
 		 netif_is_ip6gretap(tunnel_dev))
 		return &gre_tunnel;
@@ -55,7 +66,11 @@ static int get_route_and_out_devs(struct
 	/* if the egress device isn't on the same HW e-switch or
 	 * it's a LAG device, use the uplink
 	 */
+#ifdef HAVE_NETDEV_PORT_SAME_PARENT_ID
 	if (!netdev_port_same_parent_id(priv->netdev, real_dev) ||
+#else
+	if (!switchdev_port_same_parent_id(priv->netdev, real_dev) ||
+#endif
 	    dst_is_lag_dev) {
 		*route_dev = dev;
 		*out_dev = uplink_dev;
@@ -104,8 +119,11 @@ static int mlx5e_route_lookup_ipv4(struc
 	ret = PTR_ERR_OR_ZERO(rt);
 	if (ret)
 		return ret;
-
+#ifdef HAVE_RT_GW_FAMILY
 	if (mlx5_lag_is_multipath(mdev) && rt->rt_gw_family != AF_INET)
+#else
+	if (mlx5_lag_is_multipath(mdev) && !rt->rt_uses_gateway)
+#endif
 		return -ENETUNREACH;
 #else
 	return -EOPNOTSUPP;
@@ -145,13 +163,21 @@ static int mlx5e_route_lookup_ipv6(struc
 	struct neighbour *n = NULL;
 	struct dst_entry *dst;
 
-#if IS_ENABLED(CONFIG_INET) && IS_ENABLED(CONFIG_IPV6)
+#if IS_ENABLED(CONFIG_INET) && IS_ENABLED(CONFIG_IPV6) && defined(HAVE_IPV6_STUB) && defined(HAVE_IPV6_DST_LOOKUP_TAKES_NET)
 	int ret;
 
+#if defined(HAVE_IPV6_STUB) && defined(HAVE_IPV6_DST_LOOKUP_FLOW)
+	dst = ipv6_stub->ipv6_dst_lookup_flow(dev_net(mirred_dev), NULL, fl6,
+			NULL);
+	if (IS_ERR(dst))
+		return PTR_ERR(dst);
+
+#else
 	ret = ipv6_stub->ipv6_dst_lookup(dev_net(mirred_dev), NULL, &dst,
 					 fl6);
 	if (ret < 0)
 		return ret;
+#endif
 
 	if (!(*out_ttl))
 		*out_ttl = ip6_dst_hoplimit(dst);
@@ -465,8 +491,11 @@ bool mlx5e_tc_tun_device_to_offload(stru
 
 int mlx5e_tc_tun_init_encap_attr(struct net_device *tunnel_dev,
 				 struct mlx5e_priv *priv,
-				 struct mlx5e_encap_entry *e,
-				 struct netlink_ext_ack *extack)
+				 struct mlx5e_encap_entry *e
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				 , struct netlink_ext_ack *extack
+#endif
+				)
 {
 	struct mlx5e_tc_tunnel *tunnel = mlx5e_get_tc_tun(tunnel_dev);
 
@@ -475,7 +504,11 @@ int mlx5e_tc_tun_init_encap_attr(struct
 		return -EOPNOTSUPP;
 	}
 
-	return tunnel->init_encap_attr(tunnel_dev, priv, e, extack);
+	return tunnel->init_encap_attr(tunnel_dev, priv, e
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				       , extack
+#endif
+				      );
 }
 
 int mlx5e_tc_tun_parse(struct net_device *filter_dev,
@@ -483,7 +516,11 @@ int mlx5e_tc_tun_parse(struct net_device
 		       struct mlx5_flow_spec *spec,
 		       struct tc_cls_flower_offload *f,
 		       void *headers_c,
-		       void *headers_v, u8 *match_level)
+		       void *headers_v, u8 *match_level
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+		       , struct flow_rule *rule
+#endif
+		       )
 {
 	struct mlx5e_tc_tunnel *tunnel = mlx5e_get_tc_tun(filter_dev);
 	int err = 0;
@@ -500,14 +537,24 @@ int mlx5e_tc_tun_parse(struct net_device
 
 	if (tunnel->parse_udp_ports) {
 		err = tunnel->parse_udp_ports(priv, spec, f,
-					      headers_c, headers_v);
+					      headers_c, headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+					      , rule
+#endif
+					     );
+
 		if (err)
 			goto out;
 	}
 
 	if (tunnel->parse_tunnel) {
 		err = tunnel->parse_tunnel(priv, spec, f,
-					   headers_c, headers_v);
+					   headers_c, headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+					   , rule
+#endif
+					  );
+
 		if (err)
 			goto out;
 	}
@@ -520,17 +567,28 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 				 struct mlx5_flow_spec *spec,
 				 struct tc_cls_flower_offload *f,
 				 void *headers_c,
-				 void *headers_v)
+				 void *headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+				 , struct flow_rule *rule
+#endif
+				)
+
 {
+#ifdef HAVE_TC_SETUP_FLOW_ACTION
 	struct flow_rule *rule = tc_cls_flower_offload_flow_rule(f);
+#endif
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct flow_match_ports enc_ports;
 
 	/* Full udp dst port must be given */
 
 	if (!flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_ENC_PORTS)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "UDP tunnel decap filter must include enc_dst_port condition");
+#endif
 		netdev_warn(priv->netdev,
 			    "UDP tunnel decap filter must include enc_dst_port condition\n");
 		return -EOPNOTSUPP;
@@ -540,8 +598,10 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 
 	if (memchr_inv(&enc_ports.mask->dst, 0xff,
 		       sizeof(enc_ports.mask->dst))) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "UDP tunnel decap filter must match enc_dst_port fully");
+#endif
 		netdev_warn(priv->netdev,
 			    "UDP tunnel decap filter must match enc_dst_port fully\n");
 		return -EOPNOTSUPP;
@@ -569,3 +629,5 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 
 	return 0;
 }
+
+#endif /* HAVE_TCF_TUNNEL_INFO */
