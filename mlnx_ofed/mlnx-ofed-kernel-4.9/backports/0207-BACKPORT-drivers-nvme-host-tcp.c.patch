From: Tom Wu <tomwu@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/nvme/host/tcp.c

Signed-off-by: Tom Wu <tomwu@mellanox.com>
---
 drivers/nvme/host/tcp.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

--- a/drivers/nvme/host/tcp.c
+++ b/drivers/nvme/host/tcp.c
@@ -3,6 +3,9 @@
  * NVMe over Fabrics TCP host.
  * Copyright (c) 2018 Lightbits Labs. All rights reserved.
  */
+#ifdef pr_fmt
+#undef pr_fmt
+#endif
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 #include <linux/module.h>
 #include <linux/init.h>
@@ -111,7 +114,9 @@ struct nvme_tcp_ctrl {
 	struct work_struct	err_work;
 	struct delayed_work	connect_work;
 	struct nvme_tcp_request async_req;
+#ifdef HAVE_BLK_MQ_HCTX_TYPE
 	u32			io_queues[HCTX_MAX_TYPES];
+#endif
 };
 
 static LIST_HEAD(nvme_tcp_ctrl_list);
@@ -1474,7 +1479,9 @@ static struct blk_mq_tag_set *nvme_tcp_a
 		set->driver_data = ctrl;
 		set->nr_hw_queues = nctrl->queue_count - 1;
 		set->timeout = NVME_IO_TIMEOUT;
+#ifdef HAVE_BLK_MQ_HCTX_TYPE
 		set->nr_maps = 2 /* default + read */;
+#endif
 	}
 
 	ret = blk_mq_alloc_tag_set(set);
@@ -1580,6 +1587,7 @@ static unsigned int nvme_tcp_nr_io_queue
 static void nvme_tcp_set_io_queues(struct nvme_ctrl *nctrl,
 		unsigned int nr_io_queues)
 {
+#ifdef HAVE_BLK_MQ_HCTX_TYPE
 	struct nvme_tcp_ctrl *ctrl = to_tcp_ctrl(nctrl);
 	struct nvmf_ctrl_options *opts = nctrl->opts;
 
@@ -1604,6 +1612,7 @@ static void nvme_tcp_set_io_queues(struc
 			min(opts->nr_io_queues, nr_io_queues);
 		nr_io_queues -= ctrl->io_queues[HCTX_TYPE_DEFAULT];
 	}
+#endif
 }
 
 static int nvme_tcp_alloc_io_queues(struct nvme_ctrl *ctrl)
@@ -2144,6 +2153,7 @@ static blk_status_t nvme_tcp_queue_rq(st
 
 static int nvme_tcp_map_queues(struct blk_mq_tag_set *set)
 {
+#ifdef HAVE_BLK_MQ_HCTX_TYPE
 	struct nvme_tcp_ctrl *ctrl = set->driver_data;
 	struct nvmf_ctrl_options *opts = ctrl->ctrl.opts;
 
@@ -2172,6 +2182,9 @@ static int nvme_tcp_map_queues(struct bl
 		"mapped %d/%d default/read queues.\n",
 		ctrl->io_queues[HCTX_TYPE_DEFAULT],
 		ctrl->io_queues[HCTX_TYPE_READ]);
+#else
+	blk_mq_map_queues(set);
+#endif
 
 	return 0;
 }
