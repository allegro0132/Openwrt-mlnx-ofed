From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c

Change-Id: Ife18f52efef5269c44f314c12ab2eb0c3ba80b37
---
 .../mellanox/mlx5/core/en_accel/ipsec_rxtx.c  | 41 ++++++++++++++++++-
 1 file changed, 39 insertions(+), 2 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
@@ -315,13 +315,19 @@ struct sk_buff *mlx5e_ipsec_handle_tx_sk
 	struct mlx5e_ipsec_metadata *mdata = NULL;
 	struct mlx5e_ipsec_sa_entry *sa_entry;
 	struct xfrm_state *x;
+#ifdef HAVE_SK_BUFF_STRUCT_SOCK_SK
 	struct sec_path *sp;
+#endif
 
 	if (!xo)
 		return skb;
 
+#ifdef HAVE_SK_BUFF_STRUCT_SOCK_SK
 	sp = skb_sec_path(skb);
 	if (unlikely(sp->len != 1)) {
+#else
+	if (unlikely(skb->sp->len != 1)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_tx_drop_bundle);
 		goto drop;
 	}
@@ -384,11 +390,18 @@ mlx5e_ipsec_build_sp(struct net_device *
 	struct mlx5e_priv *priv = netdev_priv(netdev);
 	struct xfrm_offload *xo;
 	struct xfrm_state *xs;
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp;
+#endif
 	u32 sa_handle;
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = secpath_set(skb);
 	if (unlikely(!sp)) {
+#else
+	skb->sp = secpath_dup(skb->sp);
+	if (unlikely(!skb->sp)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_rx_drop_sp_alloc);
 		return NULL;
 	}
@@ -400,9 +413,14 @@ mlx5e_ipsec_build_sp(struct net_device *
 		return NULL;
 	}
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = skb_sec_path(skb);
 	sp->xvec[sp->len++] = xs;
 	sp->olen++;
+#else
+	skb->sp->xvec[skb->sp->len++] = xs;
+	skb->sp->olen++;
+#endif
 
 	xo = xfrm_offload(skb);
 	xo->flags = CRYPTO_DONE;
@@ -465,7 +483,9 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 	struct mlx5e_priv *priv;
 	struct xfrm_offload *xo;
 	struct xfrm_state *xs;
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp;
+#endif
 	u32  sa_handle;
 
 	if (likely(!(ipsec_syndrome & MLX5_IPSEC_METADATA_MARKER_MASK)))
@@ -475,8 +495,13 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 	priv = netdev_priv(netdev);
 	if (!priv->ipsec)
 		return;
-	sp = secpath_set(skb);
-	if (unlikely(!sp)) {
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
+        sp = secpath_set(skb);
+        if (unlikely(!sp)) {
+#else
+        skb->sp = secpath_dup(skb->sp);
+        if (unlikely(!skb->sp)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_rx_drop_sp_alloc);
 		return;
 	}
@@ -487,9 +512,14 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 		return;
 	}
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = skb_sec_path(skb);
 	sp->xvec[sp->len++] = xs;
 	sp->olen++;
+#else
+	skb->sp->xvec[skb->sp->len++] = xs;
+	skb->sp->olen++;
+#endif
 
 	xo = xfrm_offload(skb);
 	xo->flags = CRYPTO_DONE;
@@ -514,11 +544,18 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 bool mlx5e_ipsec_feature_check(struct sk_buff *skb, struct net_device *netdev,
 			       netdev_features_t features)
 {
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp = skb_sec_path(skb);
+#endif
 	struct xfrm_state *x;
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	if (sp && sp->len) {
 		x = sp->xvec[0];
+#else
+	if (skb->sp && skb->sp->len) {
+		x = skb->sp->xvec[0];
+#endif
 		if (x && x->xso.offload_handle)
 			return true;
 	}
